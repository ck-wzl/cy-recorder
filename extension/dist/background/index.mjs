(function(){"use strict";var ce=typeof globalThis<"u"?globalThis:typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{};function se(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}var ne={exports:{}};const Ce=e=>typeof crypto<"u"&&typeof crypto.getRandomValues=="function"?()=>{const r=crypto.getRandomValues(new Uint8Array(1))[0];return(r>=e?r%e:r).toString(e)}:()=>Math.floor(Math.random()*e).toString(e),me=(e=7,r=!1)=>Array.from({length:e},Ce(r?16:36)).join("");ne.exports=me,ne.exports.default=me;var Ee=ne.exports;const J=se(Ee);var Se=()=>`uid::${J(7)}`,Pe=(e,r=["endpointName","fingerprint"])=>typeof e=="object"&&e!==null&&r.every(s=>s in e),Te=e=>{try{const r=JSON.parse(e);return Pe(r)?r:null}catch{return null}},_e=()=>{let e=[];return{add:(...r)=>{e=[...e,...r]},remove:r=>{e=typeof r=="string"?e.filter(s=>s.message.transactionId!==r):e.filter(s=>!r.includes(s))},entries:()=>e}},V=class{static toBackground(e,r){return e.postMessage(r)}static toExtensionContext(e,r){return e.postMessage(r)}},Me=Object.defineProperty,Ie=Object.defineProperties,$e=Object.getOwnPropertyDescriptors,Ae=Object.getOwnPropertySymbols,Be=Object.prototype.hasOwnProperty,Ne=Object.prototype.propertyIsEnumerable,de=(e,r,s)=>r in e?Me(e,r,{enumerable:!0,configurable:!0,writable:!0,value:s}):e[r]=s,N=(e,r)=>{for(var s in r||(r={}))Be.call(r,s)&&de(e,s,r[s]);if(Ae)for(var s of Ae(r))Ne.call(r,s)&&de(e,s,r[s]);return e},te=(e,r)=>Ie(e,$e(r)),Oe=/^((?:background$)|devtools|popup|options|content-script|window)(?:@(\d+)(?:\.(\d+))?)?$/,oe=e=>{const[,r,s,m]=e.match(Oe)||[];return{context:r,tabId:+s,frameId:m?+m:void 0}},K=({context:e,tabId:r,frameId:s})=>["background","popup","options"].includes(e)?e:`${e}@${r}${s?`.${s}`:""}`;const Re=[{property:"name",enumerable:!1},{property:"message",enumerable:!1},{property:"stack",enumerable:!1},{property:"code",enumerable:!0}],ie=Symbol(".toJSON was called"),je=e=>{e[ie]=!0;const r=e.toJSON();return delete e[ie],r},ue=({from:e,seen:r,to_:s,forceEnumerable:m,maxDepth:A,depth:l})=>{const i=s||(Array.isArray(e)?[]:{});if(r.push(e),l>=A)return i;if(typeof e.toJSON=="function"&&e[ie]!==!0)return je(e);for(const[g,d]of Object.entries(e)){if(typeof Buffer=="function"&&Buffer.isBuffer(d)){i[g]="[object Buffer]";continue}if(d!==null&&typeof d=="object"&&typeof d.pipe=="function"){i[g]="[object Stream]";continue}if(typeof d!="function"){if(!d||typeof d!="object"){i[g]=d;continue}if(!r.includes(e[g])){l++,i[g]=ue({from:e[g],seen:[...r],forceEnumerable:m,maxDepth:A,depth:l});continue}i[g]="[Circular]"}}for(const{property:g,enumerable:d}of Re)typeof e[g]=="string"&&Object.defineProperty(i,g,{value:e[g],enumerable:m?!0:d,configurable:!0,writable:!0});return i};function Le(e,r={}){const{maxDepth:s=Number.POSITIVE_INFINITY}=r;return typeof e=="object"&&e!==null?ue({from:e,seen:[],forceEnumerable:!0,maxDepth:s,depth:0}):typeof e=="function"?`[Function: ${e.name||"anonymous"}]`:e}let fe=()=>({events:{},emit(e,...r){(this.events[e]||[]).forEach(s=>s(...r))},on(e,r){return(this.events[e]=this.events[e]||[]).push(r),()=>this.events[e]=(this.events[e]||[]).filter(s=>s!==r)}});var De=(e,r,s)=>{const m=J(),A=new Map,l=new Map,i=g=>{if(g.destination.context===e&&!g.destination.frameId&&!g.destination.tabId){s==null||s(g);const{transactionId:d,messageID:v,messageType:p}=g,P=()=>{const C=A.get(d);if(C){const{err:y,data:S}=g;if(y){const E=y,R=self[E.name],U=new(typeof R=="function"?R:Error)(E.message);for(const j in E)U[j]=E[j];C.reject(U)}else C.resolve(S);A.delete(d)}},M=async()=>{let C,y,S=!1;try{const E=l.get(v);if(typeof E=="function")C=await E({sender:g.origin,id:v,data:g.data,timestamp:g.timestamp});else throw S=!0,new Error(`[webext-bridge] No handler registered in '${e}' to accept messages with id '${v}'`)}catch(E){y=E}finally{if(y&&(g.err=Le(y)),i(te(N({},g),{messageType:"reply",data:C,origin:{context:e,tabId:null},destination:g.origin,hops:[]})),y&&!S)throw C}};switch(p){case"reply":return P();case"message":return M()}}return g.hops.push(`${e}::${m}`),r(g)};return{handleMessage:i,endTransaction:g=>{const d=A.get(g);d==null||d.reject("Transaction was ended before it could complete"),A.delete(g)},sendMessage:(g,d,v="background")=>{const p=typeof v=="string"?oe(v):v,P="Bridge#sendMessage ->";if(!p.context)throw new TypeError(`${P} Destination must be any one of known destinations`);return new Promise((M,C)=>{const y={messageID:g,data:d,destination:p,messageType:"message",transactionId:J(),origin:{context:e,tabId:null},hops:[],timestamp:Date.now()};A.set(y.transactionId,{resolve:M,reject:C});try{i(y)}catch(S){A.delete(y.transactionId),C(S)}})},onMessage:(g,d)=>(l.set(g,d),()=>l.delete(g))}},H=class{constructor(e,r){this.endpointRuntime=e,this.streamInfo=r,this.emitter=fe(),this.isClosed=!1,this.handleStreamClose=()=>{this.isClosed||(this.isClosed=!0,this.emitter.emit("closed",!0),this.emitter.events={})},H.initDone||(e.onMessage("__crx_bridge_stream_transfer__",s=>{const{streamId:m,streamTransfer:A,action:l}=s.data,i=H.openStreams.get(m);i&&!i.isClosed&&(l==="transfer"&&i.emitter.emit("message",A),l==="close"&&(H.openStreams.delete(m),i.handleStreamClose()))}),H.initDone=!0),H.openStreams.set(this.streamInfo.streamId,this)}get info(){return this.streamInfo}send(e){if(this.isClosed)throw new Error("Attempting to send a message over closed stream. Use stream.onClose(<callback>) to keep an eye on stream status");this.endpointRuntime.sendMessage("__crx_bridge_stream_transfer__",{streamId:this.streamInfo.streamId,streamTransfer:e,action:"transfer"},this.streamInfo.endpoint)}close(e){e&&this.send(e),this.handleStreamClose(),this.endpointRuntime.sendMessage("__crx_bridge_stream_transfer__",{streamId:this.streamInfo.streamId,streamTransfer:null,action:"close"},this.streamInfo.endpoint)}onMessage(e){return this.getDisposable("message",e)}onClose(e){return this.getDisposable("closed",e)}getDisposable(e,r){const s=this.emitter.on(e,r);return Object.assign(s,{dispose:s,close:s})}},Q=H;Q.initDone=!1,Q.openStreams=new Map;var Fe=e=>{const r=new Map,s=new Map,m=fe();e.onMessage("__crx_bridge_stream_open__",i=>new Promise(g=>{const{sender:d,data:v}=i,{channel:p}=v;let P=!1,M=()=>{};const C=()=>{const y=s.get(p);typeof y=="function"?(y(new Q(e,te(N({},v),{endpoint:d}))),P&&M(),g(!0)):P||(P=!0,M=m.on("did-change-stream-callbacks",C))};C()}));async function A(i,g){if(r.has(i))throw new Error("webext-bridge: A Stream is already open at this channel");const d=typeof g=="string"?oe(g):g,v={streamId:J(),channel:i,endpoint:d},p=new Q(e,v);return p.onClose(()=>r.delete(i)),await e.sendMessage("__crx_bridge_stream_open__",v,d),r.set(i,p),p}function l(i,g){if(s.has(i))throw new Error("webext-bridge: This channel has already been claimed. Stream allows only one-on-one communication");s.set(i,g),m.emit("did-change-stream-callbacks")}return{openStream:A,onOpenStreamChannel:l}},xe={exports:{}};(function(e,r){(function(s,m){m(e)})(typeof globalThis<"u"?globalThis:typeof self<"u"?self:ce,function(s){if(typeof globalThis!="object"||typeof chrome!="object"||!chrome||!chrome.runtime||!chrome.runtime.id)throw new Error("This script should only be loaded in a browser extension.");if(typeof globalThis.browser>"u"||Object.getPrototypeOf(globalThis.browser)!==Object.prototype){const m="The message port closed before a response was received.",A="Returning a Promise is the preferred way to send a reply from an onMessage/onMessageExternal listener, as the sendResponse will be removed from the specs (See https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/runtime/onMessage)",l=i=>{const g={alarms:{clear:{minArgs:0,maxArgs:1},clearAll:{minArgs:0,maxArgs:0},get:{minArgs:0,maxArgs:1},getAll:{minArgs:0,maxArgs:0}},bookmarks:{create:{minArgs:1,maxArgs:1},get:{minArgs:1,maxArgs:1},getChildren:{minArgs:1,maxArgs:1},getRecent:{minArgs:1,maxArgs:1},getSubTree:{minArgs:1,maxArgs:1},getTree:{minArgs:0,maxArgs:0},move:{minArgs:2,maxArgs:2},remove:{minArgs:1,maxArgs:1},removeTree:{minArgs:1,maxArgs:1},search:{minArgs:1,maxArgs:1},update:{minArgs:2,maxArgs:2}},browserAction:{disable:{minArgs:0,maxArgs:1,fallbackToNoCallback:!0},enable:{minArgs:0,maxArgs:1,fallbackToNoCallback:!0},getBadgeBackgroundColor:{minArgs:1,maxArgs:1},getBadgeText:{minArgs:1,maxArgs:1},getPopup:{minArgs:1,maxArgs:1},getTitle:{minArgs:1,maxArgs:1},openPopup:{minArgs:0,maxArgs:0},setBadgeBackgroundColor:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setBadgeText:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setIcon:{minArgs:1,maxArgs:1},setPopup:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setTitle:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0}},browsingData:{remove:{minArgs:2,maxArgs:2},removeCache:{minArgs:1,maxArgs:1},removeCookies:{minArgs:1,maxArgs:1},removeDownloads:{minArgs:1,maxArgs:1},removeFormData:{minArgs:1,maxArgs:1},removeHistory:{minArgs:1,maxArgs:1},removeLocalStorage:{minArgs:1,maxArgs:1},removePasswords:{minArgs:1,maxArgs:1},removePluginData:{minArgs:1,maxArgs:1},settings:{minArgs:0,maxArgs:0}},commands:{getAll:{minArgs:0,maxArgs:0}},contextMenus:{remove:{minArgs:1,maxArgs:1},removeAll:{minArgs:0,maxArgs:0},update:{minArgs:2,maxArgs:2}},cookies:{get:{minArgs:1,maxArgs:1},getAll:{minArgs:1,maxArgs:1},getAllCookieStores:{minArgs:0,maxArgs:0},remove:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}},devtools:{inspectedWindow:{eval:{minArgs:1,maxArgs:2,singleCallbackArg:!1}},panels:{create:{minArgs:3,maxArgs:3,singleCallbackArg:!0},elements:{createSidebarPane:{minArgs:1,maxArgs:1}}}},downloads:{cancel:{minArgs:1,maxArgs:1},download:{minArgs:1,maxArgs:1},erase:{minArgs:1,maxArgs:1},getFileIcon:{minArgs:1,maxArgs:2},open:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},pause:{minArgs:1,maxArgs:1},removeFile:{minArgs:1,maxArgs:1},resume:{minArgs:1,maxArgs:1},search:{minArgs:1,maxArgs:1},show:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0}},extension:{isAllowedFileSchemeAccess:{minArgs:0,maxArgs:0},isAllowedIncognitoAccess:{minArgs:0,maxArgs:0}},history:{addUrl:{minArgs:1,maxArgs:1},deleteAll:{minArgs:0,maxArgs:0},deleteRange:{minArgs:1,maxArgs:1},deleteUrl:{minArgs:1,maxArgs:1},getVisits:{minArgs:1,maxArgs:1},search:{minArgs:1,maxArgs:1}},i18n:{detectLanguage:{minArgs:1,maxArgs:1},getAcceptLanguages:{minArgs:0,maxArgs:0}},identity:{launchWebAuthFlow:{minArgs:1,maxArgs:1}},idle:{queryState:{minArgs:1,maxArgs:1}},management:{get:{minArgs:1,maxArgs:1},getAll:{minArgs:0,maxArgs:0},getSelf:{minArgs:0,maxArgs:0},setEnabled:{minArgs:2,maxArgs:2},uninstallSelf:{minArgs:0,maxArgs:1}},notifications:{clear:{minArgs:1,maxArgs:1},create:{minArgs:1,maxArgs:2},getAll:{minArgs:0,maxArgs:0},getPermissionLevel:{minArgs:0,maxArgs:0},update:{minArgs:2,maxArgs:2}},pageAction:{getPopup:{minArgs:1,maxArgs:1},getTitle:{minArgs:1,maxArgs:1},hide:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setIcon:{minArgs:1,maxArgs:1},setPopup:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setTitle:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},show:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0}},permissions:{contains:{minArgs:1,maxArgs:1},getAll:{minArgs:0,maxArgs:0},remove:{minArgs:1,maxArgs:1},request:{minArgs:1,maxArgs:1}},runtime:{getBackgroundPage:{minArgs:0,maxArgs:0},getPlatformInfo:{minArgs:0,maxArgs:0},openOptionsPage:{minArgs:0,maxArgs:0},requestUpdateCheck:{minArgs:0,maxArgs:0},sendMessage:{minArgs:1,maxArgs:3},sendNativeMessage:{minArgs:2,maxArgs:2},setUninstallURL:{minArgs:1,maxArgs:1}},sessions:{getDevices:{minArgs:0,maxArgs:1},getRecentlyClosed:{minArgs:0,maxArgs:1},restore:{minArgs:0,maxArgs:1}},storage:{local:{clear:{minArgs:0,maxArgs:0},get:{minArgs:0,maxArgs:1},getBytesInUse:{minArgs:0,maxArgs:1},remove:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}},managed:{get:{minArgs:0,maxArgs:1},getBytesInUse:{minArgs:0,maxArgs:1}},sync:{clear:{minArgs:0,maxArgs:0},get:{minArgs:0,maxArgs:1},getBytesInUse:{minArgs:0,maxArgs:1},remove:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}}},tabs:{captureVisibleTab:{minArgs:0,maxArgs:2},create:{minArgs:1,maxArgs:1},detectLanguage:{minArgs:0,maxArgs:1},discard:{minArgs:0,maxArgs:1},duplicate:{minArgs:1,maxArgs:1},executeScript:{minArgs:1,maxArgs:2},get:{minArgs:1,maxArgs:1},getCurrent:{minArgs:0,maxArgs:0},getZoom:{minArgs:0,maxArgs:1},getZoomSettings:{minArgs:0,maxArgs:1},goBack:{minArgs:0,maxArgs:1},goForward:{minArgs:0,maxArgs:1},highlight:{minArgs:1,maxArgs:1},insertCSS:{minArgs:1,maxArgs:2},move:{minArgs:2,maxArgs:2},query:{minArgs:1,maxArgs:1},reload:{minArgs:0,maxArgs:2},remove:{minArgs:1,maxArgs:1},removeCSS:{minArgs:1,maxArgs:2},sendMessage:{minArgs:2,maxArgs:3},setZoom:{minArgs:1,maxArgs:2},setZoomSettings:{minArgs:1,maxArgs:2},update:{minArgs:1,maxArgs:2}},topSites:{get:{minArgs:0,maxArgs:0}},webNavigation:{getAllFrames:{minArgs:1,maxArgs:1},getFrame:{minArgs:1,maxArgs:1}},webRequest:{handlerBehaviorChanged:{minArgs:0,maxArgs:0}},windows:{create:{minArgs:0,maxArgs:1},get:{minArgs:1,maxArgs:2},getAll:{minArgs:0,maxArgs:1},getCurrent:{minArgs:0,maxArgs:1},getLastFocused:{minArgs:0,maxArgs:1},remove:{minArgs:1,maxArgs:1},update:{minArgs:2,maxArgs:2}}};if(Object.keys(g).length===0)throw new Error("api-metadata.json has not been included in browser-polyfill");class d extends WeakMap{constructor(t,a=void 0){super(a),this.createItem=t}get(t){return this.has(t)||this.set(t,this.createItem(t)),super.get(t)}}const v=n=>n&&typeof n=="object"&&typeof n.then=="function",p=(n,t)=>(...a)=>{i.runtime.lastError?n.reject(new Error(i.runtime.lastError.message)):t.singleCallbackArg||a.length<=1&&t.singleCallbackArg!==!1?n.resolve(a[0]):n.resolve(a)},P=n=>n==1?"argument":"arguments",M=(n,t)=>function(c,...f){if(f.length<t.minArgs)throw new Error(`Expected at least ${t.minArgs} ${P(t.minArgs)} for ${n}(), got ${f.length}`);if(f.length>t.maxArgs)throw new Error(`Expected at most ${t.maxArgs} ${P(t.maxArgs)} for ${n}(), got ${f.length}`);return new Promise((x,b)=>{if(t.fallbackToNoCallback)try{c[n](...f,p({resolve:x,reject:b},t))}catch(o){console.warn(`${n} API method doesn't seem to support the callback parameter, falling back to call it without a callback: `,o),c[n](...f),t.fallbackToNoCallback=!1,t.noCallback=!0,x()}else t.noCallback?(c[n](...f),x()):c[n](...f,p({resolve:x,reject:b},t))})},C=(n,t,a)=>new Proxy(t,{apply(c,f,x){return a.call(f,n,...x)}});let y=Function.call.bind(Object.prototype.hasOwnProperty);const S=(n,t={},a={})=>{let c=Object.create(null),f={has(b,o){return o in n||o in c},get(b,o,h){if(o in c)return c[o];if(!(o in n))return;let u=n[o];if(typeof u=="function")if(typeof t[o]=="function")u=C(n,n[o],t[o]);else if(y(a,o)){let I=M(o,a[o]);u=C(n,n[o],I)}else u=u.bind(n);else if(typeof u=="object"&&u!==null&&(y(t,o)||y(a,o)))u=S(u,t[o],a[o]);else if(y(a,"*"))u=S(u,t[o],a["*"]);else return Object.defineProperty(c,o,{configurable:!0,enumerable:!0,get(){return n[o]},set(I){n[o]=I}}),u;return c[o]=u,u},set(b,o,h,u){return o in c?c[o]=h:n[o]=h,!0},defineProperty(b,o,h){return Reflect.defineProperty(c,o,h)},deleteProperty(b,o){return Reflect.deleteProperty(c,o)}},x=Object.create(n);return new Proxy(x,f)},E=n=>({addListener(t,a,...c){t.addListener(n.get(a),...c)},hasListener(t,a){return t.hasListener(n.get(a))},removeListener(t,a){t.removeListener(n.get(a))}}),R=new d(n=>typeof n!="function"?n:function(a){const c=S(a,{},{getContent:{minArgs:0,maxArgs:0}});n(c)});let U=!1;const j=new d(n=>typeof n!="function"?n:function(a,c,f){let x=!1,b,o=new Promise($=>{b=function(k){U||(console.warn(A,new Error().stack),U=!0),x=!0,$(k)}}),h;try{h=n(a,c,b)}catch($){h=Promise.reject($)}const u=h!==!0&&v(h);if(h!==!0&&!u&&!x)return!1;const I=$=>{$.then(k=>{f(k)},k=>{let q;k&&(k instanceof Error||typeof k.message=="string")?q=k.message:q="An unexpected error occurred",f({__mozWebExtensionPolyfillReject__:!0,message:q})}).catch(k=>{console.error("Failed to send onMessage rejected reply",k)})};return I(u?h:o),!0}),ge=({reject:n,resolve:t},a)=>{i.runtime.lastError?i.runtime.lastError.message===m?t():n(new Error(i.runtime.lastError.message)):a&&a.__mozWebExtensionPolyfillReject__?n(new Error(a.message)):t(a)},G=(n,t,a,...c)=>{if(c.length<t.minArgs)throw new Error(`Expected at least ${t.minArgs} ${P(t.minArgs)} for ${n}(), got ${c.length}`);if(c.length>t.maxArgs)throw new Error(`Expected at most ${t.maxArgs} ${P(t.maxArgs)} for ${n}(), got ${c.length}`);return new Promise((f,x)=>{const b=ge.bind(null,{resolve:f,reject:x});c.push(b),a.sendMessage(...c)})},le={devtools:{network:{onRequestFinished:E(R)}},runtime:{onMessage:E(j),onMessageExternal:E(j),sendMessage:G.bind(null,"sendMessage",{minArgs:1,maxArgs:3})},tabs:{sendMessage:G.bind(null,"sendMessage",{minArgs:2,maxArgs:3})}},W={clear:{minArgs:1,maxArgs:1},get:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}};return g.privacy={network:{"*":W},services:{"*":W},websites:{"*":W}},S(i,le,g)};s.exports=l(chrome)}else s.exports=globalThis.browser})})(xe);var Ue=xe.exports;const We=se(Ue);var Z=_e(),_=new Map,z=new Map,Y=new Map,pe=(e,r)=>(z.set(e,(z.get(e)||new Set).add(r)),()=>{const s=z.get(e);s!=null&&s.delete(r)&&(s==null?void 0:s.size)===0&&z.delete(e)}),be=(e,r)=>{Y.set(e,(Y.get(e)||new Set).add(r))},L=e=>({withFingerprint:r=>{const s=A=>({and:()=>A}),m={aboutIncomingMessage:A=>{const l=_.get(e);return V.toExtensionContext(l.port,{status:"incoming",message:A}),s(m)},aboutSuccessfulDelivery:A=>{const l=_.get(e);return V.toExtensionContext(l.port,{status:"delivered",receipt:A}),s(m)},aboutMessageUndeliverability:(A,l)=>{const i=_.get(e);return(i==null?void 0:i.fingerprint)===r&&V.toExtensionContext(i.port,{status:"undeliverable",resolvedDestination:A,message:l}),s(m)},whenDeliverableTo:A=>{const l=()=>{const i=_.get(e);if((i==null?void 0:i.fingerprint)===r&&_.has(A))return V.toExtensionContext(i.port,{status:"deliverable",deliverableTo:A}),!0};if(!l()){const i=pe(A,l);be(r,i)}return s(m)},aboutSessionEnded:A=>{const l=_.get(e);return(l==null?void 0:l.fingerprint)===r&&V.toExtensionContext(l.port,{status:"terminated",fingerprint:A}),s(m)}};return m}}),qe=Se(),X=De("background",e=>{var r;if(e.origin.context==="background"&&["content-script","devtools "].includes(e.destination.context)&&!e.destination.tabId)throw new TypeError("When sending messages from background page, use @tabId syntax to target specific tab");const s=K(N(N({},e.origin),e.origin.context==="window"&&{context:"content-script"})),m=K(te(N(N({},e.destination),e.destination.context==="window"&&{context:"content-script"}),{tabId:e.destination.tabId||e.origin.tabId}));e.destination.tabId=null,e.destination.frameId=null;const A=()=>_.get(m),l=()=>_.get(s),i=()=>{var g;L(m).withFingerprint(A().fingerprint).aboutIncomingMessage(e);const d={message:e,to:A().fingerprint,from:{endpointId:s,fingerprint:(g=l())==null?void 0:g.fingerprint}};e.messageType==="message"&&Z.add(d),e.messageType==="reply"&&Z.remove(e.messageID),l()&&L(s).withFingerprint(l().fingerprint).aboutSuccessfulDelivery(d)};(r=A())!=null&&r.port?i():e.messageType==="message"&&(e.origin.context==="background"?pe(m,i):l()&&L(s).withFingerprint(l().fingerprint).aboutMessageUndeliverability(m,e).and().whenDeliverableTo(m))},e=>{const r=K(N(N({},e.origin),e.origin.context==="window"&&{context:"content-script"})),s=_.get(r),m={message:e,to:qe,from:{endpointId:r,fingerprint:s.fingerprint}};L(r).withFingerprint(s.fingerprint).aboutSuccessfulDelivery(m)});We.runtime.onConnect.addListener(e=>{var r;const s=Te(e.name);if(!s)return;s.endpointName||(s.endpointName=K({context:"content-script",tabId:e.sender.tab.id,frameId:e.sender.frameId}));const{tabId:m,frameId:A}=oe(s.endpointName);_.set(s.endpointName,{fingerprint:s.fingerprint,port:e}),(r=z.get(s.endpointName))==null||r.forEach(l=>l()),z.delete(s.endpointName),be(s.fingerprint,()=>{const l=Z.entries().filter(i=>i.to===s.fingerprint);Z.remove(l),l.forEach(i=>{i.from.endpointId==="background"?X.endTransaction(i.message.transactionId):L(i.from.endpointId).withFingerprint(i.from.fingerprint).aboutSessionEnded(s.fingerprint)})}),e.onDisconnect.addListener(()=>{var l,i;((l=_.get(s.endpointName))==null?void 0:l.fingerprint)===s.fingerprint&&_.delete(s.endpointName),(i=Y.get(s.fingerprint))==null||i.forEach(g=>g()),Y.delete(s.fingerprint)}),e.onMessage.addListener(l=>{var i,g;if(l.type==="sync"){const d=[..._.values()].map(p=>p.fingerprint),v=l.pendingResponses.filter(p=>d.includes(p.to));Z.add(...v),l.pendingResponses.filter(p=>!d.includes(p.to)).forEach(p=>L(s.endpointName).withFingerprint(s.fingerprint).aboutSessionEnded(p.to)),l.pendingDeliveries.forEach(p=>L(s.endpointName).withFingerprint(s.fingerprint).whenDeliverableTo(p));return}l.type==="deliver"&&((g=(i=l.message)==null?void 0:i.origin)!=null&&g.context)&&(l.message.origin.tabId=m,l.message.origin.frameId=A,X.handleMessage(l.message))})});var{sendMessage:he,onMessage:we}=X;Fe(X);var O=(e=>(e.On="on",e.Off="off",e.Paused="paused",e))(O||{}),D=(e=>(e.Start="start",e.Pause="pause",e.Resume="resume",e.Reset="reset",e.Add="add",e.Move="move",e.Delete="delete",e))(D||{}),F=(e=>(e.Click="click",e.DblClick="dblclick",e.KeyDown="keydown",e.Change="change",e.Submit="submit",e))(F||{});const He=e=>new Promise((r,s)=>{r({code:`cy.get('${e.selector}').click();`,prompt:`在选择器为 ${e.selector} 的元素上单击。`})}),ze=e=>new Promise((r,s)=>{r({code:`cy.get('${e.selector}').dblclick();`,prompt:`在选择器为 ${e.selector} 的元素上双击。`})}),Ve=e=>new Promise((r,s)=>{switch(e.key){case"Backspace":r({code:`cy.get('${e.selector}').type('{backspace}');`,prompt:`在选择器 ${e.selector} 所对应的元素上按下删除键。`});break;case"Escape":r({code:`cy.get('${e.selector}').type('{esc}');`,prompt:`在选择器 ${e.selector} 所对应的元素上按下Esc键。`});break;case"ArrowUp":r({code:`cy.get('${e.selector}').type('{uparrow}');`,prompt:`在选择器 ${e.selector} 所对应的元素上按下向上箭头键。`});break;case"ArrowRight":r({code:`cy.get('${e.selector}').type('{rightarrow}');`,prompt:`在选择器 ${e.selector} 所对应的元素上按下向右箭头键。`});break;case"ArrowDown":r({code:`cy.get('${e.selector}').type('{downarrow}');`,prompt:`在选择器 ${e.selector} 所对应的元素上按下向下箭头键。`});break;case"ArrowLeft":r({code:`cy.get('${e.selector}').type('{leftarrow}');`,prompt:`在选择器 ${e.selector} 所对应的元素上按下向左箭头键。`});break;default:r(null)}}),Ze=e=>new Promise((r,s)=>{(e.inputType==="checkbox"||e.inputType==="radio")&&r(null),r({code:`cy.get('${e.selector}').type('${e.value.replace(/'/g,"\\'")}');`,prompt:`在选择器 ${e.selector} 所对应的输入框中输入文本 ${e.value.replace(/'/g,"\\'")}。`})}),Ge=e=>new Promise((r,s)=>{r({code:`cy.get('${e.selector}').submit();`,prompt:`在选择器 ${e.selector} 所对应的表单上提交表单。`})}),Je=e=>{const{origin:r,pathname:s}=new URL(e);return{code:`cy.url().should('contains', '${r+s}');`,prompt:`当前URL应该包含 ${r+s}。`}},Ke=e=>({code:`cy.visit('${e}');`,prompt:`访问url为 ${e} 的页面。`}),Qe=e=>{switch(e.action){case F.Click:return He(e);case F.DblClick:return ze(e);case F.KeyDown:return Ve(e);case F.Change:return Ze(e);case F.Submit:return Ge(e);default:throw new Error(`[cypress-recorder] Uncaptured Events: ${e.action}`)}};var ye={exports:{}};(function(e,r){(function(s,m){m(e)})(typeof globalThis<"u"?globalThis:typeof self<"u"?self:ce,function(s){var m,A;if(!((A=(m=globalThis.chrome)==null?void 0:m.runtime)!=null&&A.id))throw new Error("This script should only be loaded in a browser extension.");if(typeof globalThis.browser>"u"||Object.getPrototypeOf(globalThis.browser)!==Object.prototype){const l="The message port closed before a response was received.",i=g=>{const d={alarms:{clear:{minArgs:0,maxArgs:1},clearAll:{minArgs:0,maxArgs:0},get:{minArgs:0,maxArgs:1},getAll:{minArgs:0,maxArgs:0}},bookmarks:{create:{minArgs:1,maxArgs:1},get:{minArgs:1,maxArgs:1},getChildren:{minArgs:1,maxArgs:1},getRecent:{minArgs:1,maxArgs:1},getSubTree:{minArgs:1,maxArgs:1},getTree:{minArgs:0,maxArgs:0},move:{minArgs:2,maxArgs:2},remove:{minArgs:1,maxArgs:1},removeTree:{minArgs:1,maxArgs:1},search:{minArgs:1,maxArgs:1},update:{minArgs:2,maxArgs:2}},browserAction:{disable:{minArgs:0,maxArgs:1,fallbackToNoCallback:!0},enable:{minArgs:0,maxArgs:1,fallbackToNoCallback:!0},getBadgeBackgroundColor:{minArgs:1,maxArgs:1},getBadgeText:{minArgs:1,maxArgs:1},getPopup:{minArgs:1,maxArgs:1},getTitle:{minArgs:1,maxArgs:1},openPopup:{minArgs:0,maxArgs:0},setBadgeBackgroundColor:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setBadgeText:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setIcon:{minArgs:1,maxArgs:1},setPopup:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setTitle:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0}},browsingData:{remove:{minArgs:2,maxArgs:2},removeCache:{minArgs:1,maxArgs:1},removeCookies:{minArgs:1,maxArgs:1},removeDownloads:{minArgs:1,maxArgs:1},removeFormData:{minArgs:1,maxArgs:1},removeHistory:{minArgs:1,maxArgs:1},removeLocalStorage:{minArgs:1,maxArgs:1},removePasswords:{minArgs:1,maxArgs:1},removePluginData:{minArgs:1,maxArgs:1},settings:{minArgs:0,maxArgs:0}},commands:{getAll:{minArgs:0,maxArgs:0}},contextMenus:{remove:{minArgs:1,maxArgs:1},removeAll:{minArgs:0,maxArgs:0},update:{minArgs:2,maxArgs:2}},cookies:{get:{minArgs:1,maxArgs:1},getAll:{minArgs:1,maxArgs:1},getAllCookieStores:{minArgs:0,maxArgs:0},remove:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}},devtools:{inspectedWindow:{eval:{minArgs:1,maxArgs:2,singleCallbackArg:!1}},panels:{create:{minArgs:3,maxArgs:3,singleCallbackArg:!0},elements:{createSidebarPane:{minArgs:1,maxArgs:1}}}},downloads:{cancel:{minArgs:1,maxArgs:1},download:{minArgs:1,maxArgs:1},erase:{minArgs:1,maxArgs:1},getFileIcon:{minArgs:1,maxArgs:2},open:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},pause:{minArgs:1,maxArgs:1},removeFile:{minArgs:1,maxArgs:1},resume:{minArgs:1,maxArgs:1},search:{minArgs:1,maxArgs:1},show:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0}},extension:{isAllowedFileSchemeAccess:{minArgs:0,maxArgs:0},isAllowedIncognitoAccess:{minArgs:0,maxArgs:0}},history:{addUrl:{minArgs:1,maxArgs:1},deleteAll:{minArgs:0,maxArgs:0},deleteRange:{minArgs:1,maxArgs:1},deleteUrl:{minArgs:1,maxArgs:1},getVisits:{minArgs:1,maxArgs:1},search:{minArgs:1,maxArgs:1}},i18n:{detectLanguage:{minArgs:1,maxArgs:1},getAcceptLanguages:{minArgs:0,maxArgs:0}},identity:{launchWebAuthFlow:{minArgs:1,maxArgs:1}},idle:{queryState:{minArgs:1,maxArgs:1}},management:{get:{minArgs:1,maxArgs:1},getAll:{minArgs:0,maxArgs:0},getSelf:{minArgs:0,maxArgs:0},setEnabled:{minArgs:2,maxArgs:2},uninstallSelf:{minArgs:0,maxArgs:1}},notifications:{clear:{minArgs:1,maxArgs:1},create:{minArgs:1,maxArgs:2},getAll:{minArgs:0,maxArgs:0},getPermissionLevel:{minArgs:0,maxArgs:0},update:{minArgs:2,maxArgs:2}},pageAction:{getPopup:{minArgs:1,maxArgs:1},getTitle:{minArgs:1,maxArgs:1},hide:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setIcon:{minArgs:1,maxArgs:1},setPopup:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setTitle:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},show:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0}},permissions:{contains:{minArgs:1,maxArgs:1},getAll:{minArgs:0,maxArgs:0},remove:{minArgs:1,maxArgs:1},request:{minArgs:1,maxArgs:1}},runtime:{getBackgroundPage:{minArgs:0,maxArgs:0},getPlatformInfo:{minArgs:0,maxArgs:0},openOptionsPage:{minArgs:0,maxArgs:0},requestUpdateCheck:{minArgs:0,maxArgs:0},sendMessage:{minArgs:1,maxArgs:3},sendNativeMessage:{minArgs:2,maxArgs:2},setUninstallURL:{minArgs:1,maxArgs:1}},sessions:{getDevices:{minArgs:0,maxArgs:1},getRecentlyClosed:{minArgs:0,maxArgs:1},restore:{minArgs:0,maxArgs:1}},storage:{local:{clear:{minArgs:0,maxArgs:0},get:{minArgs:0,maxArgs:1},getBytesInUse:{minArgs:0,maxArgs:1},remove:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}},managed:{get:{minArgs:0,maxArgs:1},getBytesInUse:{minArgs:0,maxArgs:1}},sync:{clear:{minArgs:0,maxArgs:0},get:{minArgs:0,maxArgs:1},getBytesInUse:{minArgs:0,maxArgs:1},remove:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}}},tabs:{captureVisibleTab:{minArgs:0,maxArgs:2},create:{minArgs:1,maxArgs:1},detectLanguage:{minArgs:0,maxArgs:1},discard:{minArgs:0,maxArgs:1},duplicate:{minArgs:1,maxArgs:1},executeScript:{minArgs:1,maxArgs:2},get:{minArgs:1,maxArgs:1},getCurrent:{minArgs:0,maxArgs:0},getZoom:{minArgs:0,maxArgs:1},getZoomSettings:{minArgs:0,maxArgs:1},goBack:{minArgs:0,maxArgs:1},goForward:{minArgs:0,maxArgs:1},highlight:{minArgs:1,maxArgs:1},insertCSS:{minArgs:1,maxArgs:2},move:{minArgs:2,maxArgs:2},query:{minArgs:1,maxArgs:1},reload:{minArgs:0,maxArgs:2},remove:{minArgs:1,maxArgs:1},removeCSS:{minArgs:1,maxArgs:2},sendMessage:{minArgs:2,maxArgs:3},setZoom:{minArgs:1,maxArgs:2},setZoomSettings:{minArgs:1,maxArgs:2},update:{minArgs:1,maxArgs:2}},topSites:{get:{minArgs:0,maxArgs:0}},webNavigation:{getAllFrames:{minArgs:1,maxArgs:1},getFrame:{minArgs:1,maxArgs:1}},webRequest:{handlerBehaviorChanged:{minArgs:0,maxArgs:0}},windows:{create:{minArgs:0,maxArgs:1},get:{minArgs:1,maxArgs:2},getAll:{minArgs:0,maxArgs:1},getCurrent:{minArgs:0,maxArgs:1},getLastFocused:{minArgs:0,maxArgs:1},remove:{minArgs:1,maxArgs:1},update:{minArgs:2,maxArgs:2}}};if(Object.keys(d).length===0)throw new Error("api-metadata.json has not been included in browser-polyfill");class v extends WeakMap{constructor(t,a=void 0){super(a),this.createItem=t}get(t){return this.has(t)||this.set(t,this.createItem(t)),super.get(t)}}const p=n=>n&&typeof n=="object"&&typeof n.then=="function",P=(n,t)=>(...a)=>{g.runtime.lastError?n.reject(new Error(g.runtime.lastError.message)):t.singleCallbackArg||a.length<=1&&t.singleCallbackArg!==!1?n.resolve(a[0]):n.resolve(a)},M=n=>n==1?"argument":"arguments",C=(n,t)=>function(c,...f){if(f.length<t.minArgs)throw new Error(`Expected at least ${t.minArgs} ${M(t.minArgs)} for ${n}(), got ${f.length}`);if(f.length>t.maxArgs)throw new Error(`Expected at most ${t.maxArgs} ${M(t.maxArgs)} for ${n}(), got ${f.length}`);return new Promise((x,b)=>{if(t.fallbackToNoCallback)try{c[n](...f,P({resolve:x,reject:b},t))}catch(o){console.warn(`${n} API method doesn't seem to support the callback parameter, falling back to call it without a callback: `,o),c[n](...f),t.fallbackToNoCallback=!1,t.noCallback=!0,x()}else t.noCallback?(c[n](...f),x()):c[n](...f,P({resolve:x,reject:b},t))})},y=(n,t,a)=>new Proxy(t,{apply(c,f,x){return a.call(f,n,...x)}});let S=Function.call.bind(Object.prototype.hasOwnProperty);const E=(n,t={},a={})=>{let c=Object.create(null),f={has(b,o){return o in n||o in c},get(b,o,h){if(o in c)return c[o];if(!(o in n))return;let u=n[o];if(typeof u=="function")if(typeof t[o]=="function")u=y(n,n[o],t[o]);else if(S(a,o)){let I=C(o,a[o]);u=y(n,n[o],I)}else u=u.bind(n);else if(typeof u=="object"&&u!==null&&(S(t,o)||S(a,o)))u=E(u,t[o],a[o]);else if(S(a,"*"))u=E(u,t[o],a["*"]);else return Object.defineProperty(c,o,{configurable:!0,enumerable:!0,get(){return n[o]},set(I){n[o]=I}}),u;return c[o]=u,u},set(b,o,h,u){return o in c?c[o]=h:n[o]=h,!0},defineProperty(b,o,h){return Reflect.defineProperty(c,o,h)},deleteProperty(b,o){return Reflect.deleteProperty(c,o)}},x=Object.create(n);return new Proxy(x,f)},R=n=>({addListener(t,a,...c){t.addListener(n.get(a),...c)},hasListener(t,a){return t.hasListener(n.get(a))},removeListener(t,a){t.removeListener(n.get(a))}}),U=new v(n=>typeof n!="function"?n:function(a){const c=E(a,{},{getContent:{minArgs:0,maxArgs:0}});n(c)}),j=new v(n=>typeof n!="function"?n:function(a,c,f){let x=!1,b,o=new Promise($=>{b=function(k){x=!0,$(k)}}),h;try{h=n(a,c,b)}catch($){h=Promise.reject($)}const u=h!==!0&&p(h);if(h!==!0&&!u&&!x)return!1;const I=$=>{$.then(k=>{f(k)},k=>{let q;k&&(k instanceof Error||typeof k.message=="string")?q=k.message:q="An unexpected error occurred",f({__mozWebExtensionPolyfillReject__:!0,message:q})}).catch(k=>{console.error("Failed to send onMessage rejected reply",k)})};return I(u?h:o),!0}),ge=({reject:n,resolve:t},a)=>{g.runtime.lastError?g.runtime.lastError.message===l?t():n(new Error(g.runtime.lastError.message)):a&&a.__mozWebExtensionPolyfillReject__?n(new Error(a.message)):t(a)},G=(n,t,a,...c)=>{if(c.length<t.minArgs)throw new Error(`Expected at least ${t.minArgs} ${M(t.minArgs)} for ${n}(), got ${c.length}`);if(c.length>t.maxArgs)throw new Error(`Expected at most ${t.maxArgs} ${M(t.maxArgs)} for ${n}(), got ${c.length}`);return new Promise((f,x)=>{const b=ge.bind(null,{resolve:f,reject:x});c.push(b),a.sendMessage(...c)})},le={devtools:{network:{onRequestFinished:R(U)}},runtime:{onMessage:R(j),onMessageExternal:R(j),sendMessage:G.bind(null,"sendMessage",{minArgs:1,maxArgs:3})},tabs:{sendMessage:G.bind(null,"sendMessage",{minArgs:2,maxArgs:3})}},W={clear:{minArgs:1,maxArgs:1},get:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}};return d.privacy={network:{"*":W},services:{"*":W},websites:{"*":W}},E(g,le,d)};s.exports=i(chrome)}else s.exports=globalThis.browser})})(ye);var Ye=ye.exports;const w=se(Ye);class Xe{constructor(){this.recStatus=O.Off,this.codeBlocks=[],this.init()}init(){return new Promise(r=>{w.storage.local.get(["recStatus","codeBlocks"]).then(s=>{s.recStatus===O.Off?(this.recStatus=s.recStatus,this.codeBlocks=[]):(this.recStatus=O.Paused,this.codeBlocks=s.codeBlocks),w.storage.local.set({recStatus:this.recStatus,codeBlocks:this.codeBlocks}).then(r())})})}resetState(){return new Promise(r=>{this.recStatus=O.Off,this.codeBlocks=[],w.storage.local.set({recStatus:this.recStatus,codeBlocks:this.codeBlocks}).then(r())})}addCodeBlock(r){return new Promise(s=>{this.codeBlocks.push(r),w.storage.local.set({codeBlocks:this.codeBlocks}).then(s(r))})}popTwoCodeBlock(){return new Promise(r=>{this.codeBlocks.splice(this.codeBlocks.length-2,2),w.storage.local.set({codeBlocks:this.codeBlocks}).then(r())})}updateState(r){return new Promise(s=>{this.recStatus=r,w.storage.local.set({recStatus:this.recStatus}).then(s())})}delCodeBlock(r){return new Promise(s=>{this.codeBlocks.splice(r,1),w.storage.local.set({codeBlocks:this.codeBlocks}).then(s())})}moveCodeBlock(r,s){return new Promise(m=>{const A=this.codeBlocks.splice(r,1)[0];this.codeBlocks.splice(s,0,A),w.storage.local.set({codeBlocks:this.codeBlocks}).then(m())})}}const B=new Xe,T={activePort:null,originalHost:null,lastURL:""},ee=()=>B.recStatus===O.On,re=e=>{T.activePort&&(!e||e.frameId===0)&&T.activePort.disconnect()},ke=e=>{if(!ee())return;const r=e.frameId===0,s=!e.url.includes(T.originalHost??""),m=e.transitionQualifiers.includes("forward_back"),A=e.transitionQualifiers.includes("from_address_bar");if(r&&(s||m||A)){ve();return}if(e.url.includes(T.originalHost??"")){const l=Je(e.url);B.addCodeBlock(l).then(()=>{he("background-action-message",{action:D.Add,code:l})})}},ae=e=>new Promise((r,s)=>{var A,l,i;if(!ee()){r();return}const m=(e==null?void 0:e.tabId)??((i=(l=(A=T.activePort)==null?void 0:A.sender)==null?void 0:l.tab)==null?void 0:i.id);if(!m){console.warn("[cypress-recorder][background]无法找到 tabId, 无法注入脚本"),r();return}!e||e.frameId===0?w.scripting.executeScript({target:{tabId:m},files:["dist/contentScripts/index.global.js"]},()=>{w.runtime.lastError?(console.error("[cypress-recorder][background]注入脚本报错：",w.runtime.lastError),s(w.runtime.lastError)):(console.log("[cypress-recorder][background]注入脚本成功"),r())}):r()}),er=()=>new Promise((e,r)=>{ae().then(()=>{B.updateState(O.On).then(()=>{w.action.setBadgeText({text:"rec"}),e()}).catch(r)}).catch(r)}),ve=()=>new Promise(e=>{re(),w.webNavigation.onDOMContentLoaded.removeListener(ae),w.webNavigation.onCommitted.removeListener(ke),w.webNavigation.onBeforeNavigate.removeListener(re),B.updateState(O.Paused).then(()=>{T.activePort=null,T.originalHost=null,w.action.setBadgeText({text:"pause"}),e()})}),rr=()=>new Promise(e=>{T.lastURL="",B.resetState().then(()=>{w.action.setBadgeText({text:""}),e()})});(()=>{re(),B.init()})(),w.runtime.onInstalled.addListener(()=>console.log("[cypress-recorder][background]扩展已安装")),w.runtime.onConnect.addListener(e=>{if(T.activePort=e,e.onDisconnect.addListener(()=>{console.log("[cypress-recorder][background]Port disconnected!"),T.activePort=null}),ee()&&(T.originalHost=e.name,w.webNavigation.onBeforeNavigate.addListener(re),w.webNavigation.onCommitted.addListener(ke),w.webNavigation.onDOMContentLoaded.addListener(ae,{url:[{hostEquals:T.originalHost}]}),e.sender&&e.sender.url&&T.lastURL!==e.sender.url)){const r=Ke(e.sender.url);T.lastURL=e.sender.url,B.addCodeBlock(r).then(()=>{he("background-action-message",{action:D.Add,code:r})})}}),we("content-event-message",async e=>{if(!ee())return;console.log("[cypress-recorder][background]接受来自content的event消息: ",e);const r=e.data.event,s=await Qe(r);s!==null&&(r.action===F.DblClick?B.popTwoCodeBlock().then(()=>{B.addCodeBlock(s)}):B.addCodeBlock(s))}),we("popup-action-message",async e=>{console.log("[cypress-recorder][background]接受来自popup的action消息: ",e);const r=e.data.action;switch(r){case D.Start:case D.Resume:await er();break;case D.Pause:await ve();break;case D.Reset:await rr();break;default:console.error(`[cypress-recorder][background]未捕获的操作：${r}`);break}})})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
