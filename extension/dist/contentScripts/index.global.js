(function(){"use strict";var ne=typeof globalThis<"u"?globalThis:typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{};function V(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}var Z={exports:{}};const ke=e=>typeof crypto<"u"&&typeof crypto.getRandomValues=="function"?()=>{const r=crypto.getRandomValues(new Uint8Array(1))[0];return(r>=e?r%e:r).toString(e)}:()=>Math.floor(Math.random()*e).toString(e),te=(e=7,r=!1)=>Array.from({length:e},ke(r?16:36)).join("");Z.exports=te,Z.exports.default=te;var Ce=Z.exports;const F=V(Ce);var Me=()=>`uid::${F(7)}`,Te=(e,r=["endpointName","fingerprint"])=>typeof e=="object"&&e!==null&&r.every(s=>s in e),Se=e=>{if(!Te(e))throw new TypeError("Invalid connection args");return JSON.stringify(e)},Pe=()=>{let e=[];return{add:(...r)=>{e=[...e,...r]},remove:r=>{e=typeof r=="string"?e.filter(s=>s.message.transactionId!==r):e.filter(s=>!r.includes(s))},entries:()=>e}},G=class{static toBackground(e,r){return e.postMessage(r)}static toExtensionContext(e,r){return e.postMessage(r)}},oe={exports:{}};(function(e,r){(function(s,a){a(e)})(typeof globalThis<"u"?globalThis:typeof self<"u"?self:ne,function(s){if(typeof globalThis!="object"||typeof chrome!="object"||!chrome||!chrome.runtime||!chrome.runtime.id)throw new Error("This script should only be loaded in a browser extension.");if(typeof globalThis.browser>"u"||Object.getPrototypeOf(globalThis.browser)!==Object.prototype){const a="The message port closed before a response was received.",l="Returning a Promise is the preferred way to send a reply from an onMessage/onMessageExternal listener, as the sendResponse will be removed from the specs (See https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/runtime/onMessage)",u=m=>{const i={alarms:{clear:{minArgs:0,maxArgs:1},clearAll:{minArgs:0,maxArgs:0},get:{minArgs:0,maxArgs:1},getAll:{minArgs:0,maxArgs:0}},bookmarks:{create:{minArgs:1,maxArgs:1},get:{minArgs:1,maxArgs:1},getChildren:{minArgs:1,maxArgs:1},getRecent:{minArgs:1,maxArgs:1},getSubTree:{minArgs:1,maxArgs:1},getTree:{minArgs:0,maxArgs:0},move:{minArgs:2,maxArgs:2},remove:{minArgs:1,maxArgs:1},removeTree:{minArgs:1,maxArgs:1},search:{minArgs:1,maxArgs:1},update:{minArgs:2,maxArgs:2}},browserAction:{disable:{minArgs:0,maxArgs:1,fallbackToNoCallback:!0},enable:{minArgs:0,maxArgs:1,fallbackToNoCallback:!0},getBadgeBackgroundColor:{minArgs:1,maxArgs:1},getBadgeText:{minArgs:1,maxArgs:1},getPopup:{minArgs:1,maxArgs:1},getTitle:{minArgs:1,maxArgs:1},openPopup:{minArgs:0,maxArgs:0},setBadgeBackgroundColor:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setBadgeText:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setIcon:{minArgs:1,maxArgs:1},setPopup:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setTitle:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0}},browsingData:{remove:{minArgs:2,maxArgs:2},removeCache:{minArgs:1,maxArgs:1},removeCookies:{minArgs:1,maxArgs:1},removeDownloads:{minArgs:1,maxArgs:1},removeFormData:{minArgs:1,maxArgs:1},removeHistory:{minArgs:1,maxArgs:1},removeLocalStorage:{minArgs:1,maxArgs:1},removePasswords:{minArgs:1,maxArgs:1},removePluginData:{minArgs:1,maxArgs:1},settings:{minArgs:0,maxArgs:0}},commands:{getAll:{minArgs:0,maxArgs:0}},contextMenus:{remove:{minArgs:1,maxArgs:1},removeAll:{minArgs:0,maxArgs:0},update:{minArgs:2,maxArgs:2}},cookies:{get:{minArgs:1,maxArgs:1},getAll:{minArgs:1,maxArgs:1},getAllCookieStores:{minArgs:0,maxArgs:0},remove:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}},devtools:{inspectedWindow:{eval:{minArgs:1,maxArgs:2,singleCallbackArg:!1}},panels:{create:{minArgs:3,maxArgs:3,singleCallbackArg:!0},elements:{createSidebarPane:{minArgs:1,maxArgs:1}}}},downloads:{cancel:{minArgs:1,maxArgs:1},download:{minArgs:1,maxArgs:1},erase:{minArgs:1,maxArgs:1},getFileIcon:{minArgs:1,maxArgs:2},open:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},pause:{minArgs:1,maxArgs:1},removeFile:{minArgs:1,maxArgs:1},resume:{minArgs:1,maxArgs:1},search:{minArgs:1,maxArgs:1},show:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0}},extension:{isAllowedFileSchemeAccess:{minArgs:0,maxArgs:0},isAllowedIncognitoAccess:{minArgs:0,maxArgs:0}},history:{addUrl:{minArgs:1,maxArgs:1},deleteAll:{minArgs:0,maxArgs:0},deleteRange:{minArgs:1,maxArgs:1},deleteUrl:{minArgs:1,maxArgs:1},getVisits:{minArgs:1,maxArgs:1},search:{minArgs:1,maxArgs:1}},i18n:{detectLanguage:{minArgs:1,maxArgs:1},getAcceptLanguages:{minArgs:0,maxArgs:0}},identity:{launchWebAuthFlow:{minArgs:1,maxArgs:1}},idle:{queryState:{minArgs:1,maxArgs:1}},management:{get:{minArgs:1,maxArgs:1},getAll:{minArgs:0,maxArgs:0},getSelf:{minArgs:0,maxArgs:0},setEnabled:{minArgs:2,maxArgs:2},uninstallSelf:{minArgs:0,maxArgs:1}},notifications:{clear:{minArgs:1,maxArgs:1},create:{minArgs:1,maxArgs:2},getAll:{minArgs:0,maxArgs:0},getPermissionLevel:{minArgs:0,maxArgs:0},update:{minArgs:2,maxArgs:2}},pageAction:{getPopup:{minArgs:1,maxArgs:1},getTitle:{minArgs:1,maxArgs:1},hide:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setIcon:{minArgs:1,maxArgs:1},setPopup:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setTitle:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},show:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0}},permissions:{contains:{minArgs:1,maxArgs:1},getAll:{minArgs:0,maxArgs:0},remove:{minArgs:1,maxArgs:1},request:{minArgs:1,maxArgs:1}},runtime:{getBackgroundPage:{minArgs:0,maxArgs:0},getPlatformInfo:{minArgs:0,maxArgs:0},openOptionsPage:{minArgs:0,maxArgs:0},requestUpdateCheck:{minArgs:0,maxArgs:0},sendMessage:{minArgs:1,maxArgs:3},sendNativeMessage:{minArgs:2,maxArgs:2},setUninstallURL:{minArgs:1,maxArgs:1}},sessions:{getDevices:{minArgs:0,maxArgs:1},getRecentlyClosed:{minArgs:0,maxArgs:1},restore:{minArgs:0,maxArgs:1}},storage:{local:{clear:{minArgs:0,maxArgs:0},get:{minArgs:0,maxArgs:1},getBytesInUse:{minArgs:0,maxArgs:1},remove:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}},managed:{get:{minArgs:0,maxArgs:1},getBytesInUse:{minArgs:0,maxArgs:1}},sync:{clear:{minArgs:0,maxArgs:0},get:{minArgs:0,maxArgs:1},getBytesInUse:{minArgs:0,maxArgs:1},remove:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}}},tabs:{captureVisibleTab:{minArgs:0,maxArgs:2},create:{minArgs:1,maxArgs:1},detectLanguage:{minArgs:0,maxArgs:1},discard:{minArgs:0,maxArgs:1},duplicate:{minArgs:1,maxArgs:1},executeScript:{minArgs:1,maxArgs:2},get:{minArgs:1,maxArgs:1},getCurrent:{minArgs:0,maxArgs:0},getZoom:{minArgs:0,maxArgs:1},getZoomSettings:{minArgs:0,maxArgs:1},goBack:{minArgs:0,maxArgs:1},goForward:{minArgs:0,maxArgs:1},highlight:{minArgs:1,maxArgs:1},insertCSS:{minArgs:1,maxArgs:2},move:{minArgs:2,maxArgs:2},query:{minArgs:1,maxArgs:1},reload:{minArgs:0,maxArgs:2},remove:{minArgs:1,maxArgs:1},removeCSS:{minArgs:1,maxArgs:2},sendMessage:{minArgs:2,maxArgs:3},setZoom:{minArgs:1,maxArgs:2},setZoomSettings:{minArgs:1,maxArgs:2},update:{minArgs:1,maxArgs:2}},topSites:{get:{minArgs:0,maxArgs:0}},webNavigation:{getAllFrames:{minArgs:1,maxArgs:1},getFrame:{minArgs:1,maxArgs:1}},webRequest:{handlerBehaviorChanged:{minArgs:0,maxArgs:0}},windows:{create:{minArgs:0,maxArgs:1},get:{minArgs:1,maxArgs:2},getAll:{minArgs:0,maxArgs:1},getCurrent:{minArgs:0,maxArgs:1},getLastFocused:{minArgs:0,maxArgs:1},remove:{minArgs:1,maxArgs:1},update:{minArgs:2,maxArgs:2}}};if(Object.keys(i).length===0)throw new Error("api-metadata.json has not been included in browser-polyfill");class A extends WeakMap{constructor(t,g=void 0){super(g),this.createItem=t}get(t){return this.has(t)||this.set(t,this.createItem(t)),super.get(t)}}const d=n=>n&&typeof n=="object"&&typeof n.then=="function",p=(n,t)=>(...g)=>{m.runtime.lastError?n.reject(new Error(m.runtime.lastError.message)):t.singleCallbackArg||g.length<=1&&t.singleCallbackArg!==!1?n.resolve(g[0]):n.resolve(g)},b=n=>n==1?"argument":"arguments",E=(n,t)=>function(c,...x){if(x.length<t.minArgs)throw new Error(`Expected at least ${t.minArgs} ${b(t.minArgs)} for ${n}(), got ${x.length}`);if(x.length>t.maxArgs)throw new Error(`Expected at most ${t.maxArgs} ${b(t.maxArgs)} for ${n}(), got ${x.length}`);return new Promise((h,w)=>{if(t.fallbackToNoCallback)try{c[n](...x,p({resolve:h,reject:w},t))}catch(o){console.warn(`${n} API method doesn't seem to support the callback parameter, falling back to call it without a callback: `,o),c[n](...x),t.fallbackToNoCallback=!1,t.noCallback=!0,h()}else t.noCallback?(c[n](...x),h()):c[n](...x,p({resolve:h,reject:w},t))})},C=(n,t,g)=>new Proxy(t,{apply(c,x,h){return g.call(x,n,...h)}});let v=Function.call.bind(Object.prototype.hasOwnProperty);const T=(n,t={},g={})=>{let c=Object.create(null),x={has(w,o){return o in n||o in c},get(w,o,y){if(o in c)return c[o];if(!(o in n))return;let f=n[o];if(typeof f=="function")if(typeof t[o]=="function")f=C(n,n[o],t[o]);else if(v(g,o)){let S=E(o,g[o]);f=C(n,n[o],S)}else f=f.bind(n);else if(typeof f=="object"&&f!==null&&(v(t,o)||v(g,o)))f=T(f,t[o],g[o]);else if(v(g,"*"))f=T(f,t[o],g["*"]);else return Object.defineProperty(c,o,{configurable:!0,enumerable:!0,get(){return n[o]},set(S){n[o]=S}}),f;return c[o]=f,f},set(w,o,y,f){return o in c?c[o]=y:n[o]=y,!0},defineProperty(w,o,y){return Reflect.defineProperty(c,o,y)},deleteProperty(w,o){return Reflect.deleteProperty(c,o)}},h=Object.create(n);return new Proxy(h,x)},M=n=>({addListener(t,g,...c){t.addListener(n.get(g),...c)},hasListener(t,g){return t.hasListener(n.get(g))},removeListener(t,g){t.removeListener(n.get(g))}}),N=new A(n=>typeof n!="function"?n:function(g){const c=T(g,{},{getContent:{minArgs:0,maxArgs:0}});n(c)});let I=!1;const O=new A(n=>typeof n!="function"?n:function(g,c,x){let h=!1,w,o=new Promise(_=>{w=function(k){I||(console.warn(l,new Error().stack),I=!0),h=!0,_(k)}}),y;try{y=n(g,c,w)}catch(_){y=Promise.reject(_)}const f=y!==!0&&d(y);if(y!==!0&&!f&&!h)return!1;const S=_=>{_.then(k=>{x(k)},k=>{let $;k&&(k instanceof Error||typeof k.message=="string")?$=k.message:$="An unexpected error occurred",x({__mozWebExtensionPolyfillReject__:!0,message:$})}).catch(k=>{console.error("Failed to send onMessage rejected reply",k)})};return S(f?y:o),!0}),re=({reject:n,resolve:t},g)=>{m.runtime.lastError?m.runtime.lastError.message===a?t():n(new Error(m.runtime.lastError.message)):g&&g.__mozWebExtensionPolyfillReject__?n(new Error(g.message)):t(g)},R=(n,t,g,...c)=>{if(c.length<t.minArgs)throw new Error(`Expected at least ${t.minArgs} ${b(t.minArgs)} for ${n}(), got ${c.length}`);if(c.length>t.maxArgs)throw new Error(`Expected at most ${t.maxArgs} ${b(t.maxArgs)} for ${n}(), got ${c.length}`);return new Promise((x,h)=>{const w=re.bind(null,{resolve:x,reject:h});c.push(w),g.sendMessage(...c)})},se={devtools:{network:{onRequestFinished:M(N)}},runtime:{onMessage:M(O),onMessageExternal:M(O),sendMessage:R.bind(null,"sendMessage",{minArgs:1,maxArgs:3})},tabs:{sendMessage:R.bind(null,"sendMessage",{minArgs:2,maxArgs:3})}},L={clear:{minArgs:1,maxArgs:1},get:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}};return i.privacy={network:{"*":L},services:{"*":L},websites:{"*":L}},T(m,se,i)};s.exports=u(chrome)}else s.exports=globalThis.browser})})(oe);var _e=oe.exports;const Ne=V(_e);var Oe=(e="")=>{const r=Me();let s,a=[];const l=Pe(),u=new Set,m=new Set,i=(d,p)=>{switch(d.status){case"undeliverable":a.some(b=>b.message.messageID===d.message.messageID)||(a=[...a,{message:d.message,resolvedDestination:d.resolvedDestination}]);return;case"deliverable":a=a.reduce((b,E)=>E.resolvedDestination===d.deliverableTo?(G.toBackground(p,{type:"deliver",message:E.message}),b):[...b,E],[]);return;case"delivered":d.receipt.message.messageType==="message"&&l.add(d.receipt);return;case"incoming":d.message.messageType==="reply"&&l.remove(d.message.messageID),u.forEach(b=>b(d.message,p));return;case"terminated":{const b=l.entries().filter(E=>d.fingerprint===E.to);l.remove(b),b.forEach(({message:E})=>m.forEach(C=>C(E)))}}},A=()=>{s=Ne.runtime.connect({name:Se({endpointName:e,fingerprint:r})}),s.onMessage.addListener(i),s.onDisconnect.addListener(A),G.toBackground(s,{type:"sync",pendingResponses:l.entries(),pendingDeliveries:[...new Set(a.map(({resolvedDestination:d})=>d))]})};return A(),{onFailure(d){m.add(d)},onMessage(d){u.add(d)},postMessage(d){G.toBackground(s,{type:"deliver",message:d})}}},J,Ie=(e,r,s)=>J??(J=new Promise(a=>{const l=m=>{const{data:{cmd:i,scope:A,context:d},ports:p}=m;if(i==="webext-port-offer"&&A===r&&d!==e)return window.removeEventListener("message",l),p[0].onmessage=s,p[0].postMessage("port-accepted"),a(p[0])},u=()=>{const m=new MessageChannel;m.port1.onmessage=i=>{if(i.data==="port-accepted")return window.removeEventListener("message",l),a(m.port1);s==null||s(i)},window.postMessage({cmd:"webext-port-offer",scope:r,context:e},"*",[m.port2])};window.addEventListener("message",l),e==="window"?setTimeout(u,0):u()})),Le=e=>{let r,s=!1,a,l;return{enable:()=>s=!0,onMessage:u=>a=u,postMessage:async u=>{if(e!=="content-script"&&e!=="window")throw new Error("Endpoint does not use postMessage");if(!s)throw new Error("Communication with window has not been allowed");return $e(r),(await l).postMessage(u)},setNamespace:u=>{if(r)throw new Error("Namespace once set cannot be changed");r=u,l=Ie(e,u,({data:m})=>a==null?void 0:a(m))}}};function $e(e){if(typeof e!="string"||e.trim().length===0)throw new Error(`webext-bridge uses window.postMessage to talk with other "window"(s) for message routingwhich is global/conflicting operation in case there are other scripts using webext-bridge. Call Bridge#setNamespace(nsps) to isolate your app. Example: setNamespace('com.facebook.react-devtools'). Make sure to use same namespace across all your scripts whereever window.postMessage is likely to be used\``)}var De=Object.defineProperty,je=Object.defineProperties,Re=Object.getOwnPropertyDescriptors,ae=Object.getOwnPropertySymbols,Fe=Object.prototype.hasOwnProperty,Be=Object.prototype.propertyIsEnumerable,ie=(e,r,s)=>r in e?De(e,r,{enumerable:!0,configurable:!0,writable:!0,value:s}):e[r]=s,ge=(e,r)=>{for(var s in r||(r={}))Fe.call(r,s)&&ie(e,s,r[s]);if(ae)for(var s of ae(r))Be.call(r,s)&&ie(e,s,r[s]);return e},me=(e,r)=>je(e,Re(r)),We=/^((?:background$)|devtools|popup|options|content-script|window)(?:@(\d+)(?:\.(\d+))?)?$/,le=e=>{const[,r,s,a]=e.match(We)||[];return{context:r,tabId:+s,frameId:a?+a:void 0}};const Ue=[{property:"name",enumerable:!1},{property:"message",enumerable:!1},{property:"stack",enumerable:!1},{property:"code",enumerable:!0}],H=Symbol(".toJSON was called"),qe=e=>{e[H]=!0;const r=e.toJSON();return delete e[H],r},ce=({from:e,seen:r,to_:s,forceEnumerable:a,maxDepth:l,depth:u})=>{const m=s||(Array.isArray(e)?[]:{});if(r.push(e),u>=l)return m;if(typeof e.toJSON=="function"&&e[H]!==!0)return qe(e);for(const[i,A]of Object.entries(e)){if(typeof Buffer=="function"&&Buffer.isBuffer(A)){m[i]="[object Buffer]";continue}if(A!==null&&typeof A=="object"&&typeof A.pipe=="function"){m[i]="[object Stream]";continue}if(typeof A!="function"){if(!A||typeof A!="object"){m[i]=A;continue}if(!r.includes(e[i])){u++,m[i]=ce({from:e[i],seen:[...r],forceEnumerable:a,maxDepth:l,depth:u});continue}m[i]="[Circular]"}}for(const{property:i,enumerable:A}of Ue)typeof e[i]=="string"&&Object.defineProperty(m,i,{value:e[i],enumerable:a?!0:A,configurable:!0,writable:!0});return m};function ze(e,r={}){const{maxDepth:s=Number.POSITIVE_INFINITY}=r;return typeof e=="object"&&e!==null?ce({from:e,seen:[],forceEnumerable:!0,maxDepth:s,depth:0}):typeof e=="function"?`[Function: ${e.name||"anonymous"}]`:e}let Ae=()=>({events:{},emit(e,...r){(this.events[e]||[]).forEach(s=>s(...r))},on(e,r){return(this.events[e]=this.events[e]||[]).push(r),()=>this.events[e]=(this.events[e]||[]).filter(s=>s!==r)}});var Ve=(e,r,s)=>{const a=F(),l=new Map,u=new Map,m=i=>{if(i.destination.context===e&&!i.destination.frameId&&!i.destination.tabId){s==null||s(i);const{transactionId:A,messageID:d,messageType:p}=i,b=()=>{const C=l.get(A);if(C){const{err:v,data:T}=i;if(v){const M=v,N=self[M.name],I=new(typeof N=="function"?N:Error)(M.message);for(const O in M)I[O]=M[O];C.reject(I)}else C.resolve(T);l.delete(A)}},E=async()=>{let C,v,T=!1;try{const M=u.get(d);if(typeof M=="function")C=await M({sender:i.origin,id:d,data:i.data,timestamp:i.timestamp});else throw T=!0,new Error(`[webext-bridge] No handler registered in '${e}' to accept messages with id '${d}'`)}catch(M){v=M}finally{if(v&&(i.err=ze(v)),m(me(ge({},i),{messageType:"reply",data:C,origin:{context:e,tabId:null},destination:i.origin,hops:[]})),v&&!T)throw C}};switch(p){case"reply":return b();case"message":return E()}}return i.hops.push(`${e}::${a}`),r(i)};return{handleMessage:m,endTransaction:i=>{const A=l.get(i);A==null||A.reject("Transaction was ended before it could complete"),l.delete(i)},sendMessage:(i,A,d="background")=>{const p=typeof d=="string"?le(d):d,b="Bridge#sendMessage ->";if(!p.context)throw new TypeError(`${b} Destination must be any one of known destinations`);return new Promise((E,C)=>{const v={messageID:i,data:A,destination:p,messageType:"message",transactionId:F(),origin:{context:e,tabId:null},hops:[],timestamp:Date.now()};l.set(v.transactionId,{resolve:E,reject:C});try{m(v)}catch(T){l.delete(v.transactionId),C(T)}})},onMessage:(i,A)=>(u.set(i,A),()=>u.delete(i))}},D=class{constructor(e,r){this.endpointRuntime=e,this.streamInfo=r,this.emitter=Ae(),this.isClosed=!1,this.handleStreamClose=()=>{this.isClosed||(this.isClosed=!0,this.emitter.emit("closed",!0),this.emitter.events={})},D.initDone||(e.onMessage("__crx_bridge_stream_transfer__",s=>{const{streamId:a,streamTransfer:l,action:u}=s.data,m=D.openStreams.get(a);m&&!m.isClosed&&(u==="transfer"&&m.emitter.emit("message",l),u==="close"&&(D.openStreams.delete(a),m.handleStreamClose()))}),D.initDone=!0),D.openStreams.set(this.streamInfo.streamId,this)}get info(){return this.streamInfo}send(e){if(this.isClosed)throw new Error("Attempting to send a message over closed stream. Use stream.onClose(<callback>) to keep an eye on stream status");this.endpointRuntime.sendMessage("__crx_bridge_stream_transfer__",{streamId:this.streamInfo.streamId,streamTransfer:e,action:"transfer"},this.streamInfo.endpoint)}close(e){e&&this.send(e),this.handleStreamClose(),this.endpointRuntime.sendMessage("__crx_bridge_stream_transfer__",{streamId:this.streamInfo.streamId,streamTransfer:null,action:"close"},this.streamInfo.endpoint)}onMessage(e){return this.getDisposable("message",e)}onClose(e){return this.getDisposable("closed",e)}getDisposable(e,r){const s=this.emitter.on(e,r);return Object.assign(s,{dispose:s,close:s})}},B=D;B.initDone=!1,B.openStreams=new Map;var Ze=e=>{const r=new Map,s=new Map,a=Ae();e.onMessage("__crx_bridge_stream_open__",m=>new Promise(i=>{const{sender:A,data:d}=m,{channel:p}=d;let b=!1,E=()=>{};const C=()=>{const v=s.get(p);typeof v=="function"?(v(new B(e,me(ge({},d),{endpoint:A}))),b&&E(),i(!0)):b||(b=!0,E=a.on("did-change-stream-callbacks",C))};C()}));async function l(m,i){if(r.has(m))throw new Error("webext-bridge: A Stream is already open at this channel");const A=typeof i=="string"?le(i):i,d={streamId:F(),channel:m,endpoint:A},p=new B(e,d);return p.onClose(()=>r.delete(m)),await e.sendMessage("__crx_bridge_stream_open__",d,A),r.set(m,p),p}function u(m,i){if(s.has(m))throw new Error("webext-bridge: This channel has already been claimed. Stream allows only one-on-one communication");s.set(m,i),a.emit("did-change-stream-callbacks")}return{openStream:l,onOpenStreamChannel:u}},K=Le("content-script"),Q=Oe(),j=Ve("content-script",e=>{e.destination.context==="window"?K.postMessage(e):Q.postMessage(e)});K.onMessage(e=>{e.origin={context:"window",tabId:null},j.handleMessage(e)}),Q.onMessage(j.handleMessage),Q.onFailure(e=>{if(e.origin.context==="window"){K.postMessage({type:"error",transactionID:e.transactionId});return}j.endTransaction(e.transactionId)});var{sendMessage:Ge,onMessage:ir}=j;Ze(j);let P,Y,ue;function Je(e,r){if(ue=new Date,e.nodeType!==Node.ELEMENT_NODE)throw new Error("Can't generate CSS selector for non-element node type.");if(e.tagName.toLowerCase()==="html")return"html";const s={root:document.body,idName:l=>!0,className:l=>!0,tagName:l=>!0,attr:(l,u)=>!1,seedMinLength:1,optimizedMinLength:2,threshold:1e3,maxNumberOfTries:1e4,timeoutMs:void 0};P={...s,...r},Y=He(P.root,s);let a=W(e,"all",()=>W(e,"two",()=>W(e,"one",()=>W(e,"none"))));if(a){const l=be(we(a,e));return l.length>0&&(a=l[0]),U(a)}else throw new Error("Selector was not found.")}function He(e,r){return e.nodeType===Node.DOCUMENT_NODE?e:e===r.root?e.ownerDocument:e}function W(e,r,s){let a=null,l=[],u=e,m=0;for(;u;){const i=new Date().getTime()-ue.getTime();if(P.timeoutMs!==void 0&&i>P.timeoutMs)throw new Error(`Timeout: Can't find a unique selector after ${i}ms`);let A=z(Ke(u))||z(...Qe(u))||z(...Ye(u))||z(Xe(u))||[pe()];const d=er(u);if(r=="all")d&&(A=A.concat(A.filter(X).map(p=>q(p,d))));else if(r=="two")A=A.slice(0,1),d&&(A=A.concat(A.filter(X).map(p=>q(p,d))));else if(r=="one"){const[p]=A=A.slice(0,1);d&&X(p)&&(A=[q(p,d)])}else r=="none"&&(A=[pe()],d&&(A=[q(A[0],d)]));for(let p of A)p.level=m;if(l.push(A),l.length>=P.seedMinLength&&(a=de(l,s),a))break;u=u.parentElement,m++}return a||(a=de(l,s)),!a&&s?s():a}function de(e,r){const s=be(he(e));if(s.length>P.threshold)return r?r():null;for(let a of s)if(xe(a))return a;return null}function U(e){let r=e[0],s=r.name;for(let a=1;a<e.length;a++){const l=e[a].level||0;r.level===l-1?s=`${e[a].name} > ${s}`:s=`${e[a].name} ${s}`,r=e[a]}return s}function fe(e){return e.map(r=>r.penalty).reduce((r,s)=>r+s,0)}function xe(e){const r=U(e);switch(Y.querySelectorAll(r).length){case 0:throw new Error(`Can't select any node with this selector: ${r}`);case 1:return!0;default:return!1}}function Ke(e){const r=e.getAttribute("id");return r&&P.idName(r)?{name:"#"+CSS.escape(r),penalty:0}:null}function Qe(e){return Array.from(e.attributes).filter(s=>P.attr(s.name,s.value)).map(s=>({name:`[${CSS.escape(s.name)}="${CSS.escape(s.value)}"]`,penalty:.5}))}function Ye(e){return Array.from(e.classList).filter(P.className).map(s=>({name:"."+CSS.escape(s),penalty:1}))}function Xe(e){const r=e.tagName.toLowerCase();return P.tagName(r)?{name:r,penalty:2}:null}function pe(){return{name:"*",penalty:3}}function er(e){const r=e.parentNode;if(!r)return null;let s=r.firstChild;if(!s)return null;let a=0;for(;s&&(s.nodeType===Node.ELEMENT_NODE&&a++,s!==e);)s=s.nextSibling;return a}function q(e,r){return{name:e.name+`:nth-child(${r})`,penalty:e.penalty+1}}function X(e){return e.name!=="html"&&!e.name.startsWith("#")}function z(...e){const r=e.filter(rr);return r.length>0?r:null}function rr(e){return e!=null}function*he(e,r=[]){if(e.length>0)for(let s of e[0])yield*he(e.slice(1,e.length),r.concat(s));else yield r}function be(e){return[...e].sort((r,s)=>fe(r)-fe(s))}function*we(e,r,s={counter:0,visited:new Map}){if(e.length>2&&e.length>P.optimizedMinLength)for(let a=1;a<e.length-1;a++){if(s.counter>P.maxNumberOfTries)return;s.counter+=1;const l=[...e];l.splice(a,1);const u=U(l);if(s.visited.has(u))return;xe(l)&&sr(l,r)&&(yield l,s.visited.set(u,!0),yield*we(l,r,s))}}function sr(e,r){return Y.querySelector(U(e))===r}var ee=(e=>(e.Click="click",e.DblClick="dblclick",e.KeyDown="keydown",e.Change="change",e.Submit="submit",e))(ee||{}),ye={exports:{}};(function(e,r){(function(s,a){a(e)})(typeof globalThis<"u"?globalThis:typeof self<"u"?self:ne,function(s){var a,l;if(!((l=(a=globalThis.chrome)==null?void 0:a.runtime)!=null&&l.id))throw new Error("This script should only be loaded in a browser extension.");if(typeof globalThis.browser>"u"||Object.getPrototypeOf(globalThis.browser)!==Object.prototype){const u="The message port closed before a response was received.",m=i=>{const A={alarms:{clear:{minArgs:0,maxArgs:1},clearAll:{minArgs:0,maxArgs:0},get:{minArgs:0,maxArgs:1},getAll:{minArgs:0,maxArgs:0}},bookmarks:{create:{minArgs:1,maxArgs:1},get:{minArgs:1,maxArgs:1},getChildren:{minArgs:1,maxArgs:1},getRecent:{minArgs:1,maxArgs:1},getSubTree:{minArgs:1,maxArgs:1},getTree:{minArgs:0,maxArgs:0},move:{minArgs:2,maxArgs:2},remove:{minArgs:1,maxArgs:1},removeTree:{minArgs:1,maxArgs:1},search:{minArgs:1,maxArgs:1},update:{minArgs:2,maxArgs:2}},browserAction:{disable:{minArgs:0,maxArgs:1,fallbackToNoCallback:!0},enable:{minArgs:0,maxArgs:1,fallbackToNoCallback:!0},getBadgeBackgroundColor:{minArgs:1,maxArgs:1},getBadgeText:{minArgs:1,maxArgs:1},getPopup:{minArgs:1,maxArgs:1},getTitle:{minArgs:1,maxArgs:1},openPopup:{minArgs:0,maxArgs:0},setBadgeBackgroundColor:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setBadgeText:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setIcon:{minArgs:1,maxArgs:1},setPopup:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setTitle:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0}},browsingData:{remove:{minArgs:2,maxArgs:2},removeCache:{minArgs:1,maxArgs:1},removeCookies:{minArgs:1,maxArgs:1},removeDownloads:{minArgs:1,maxArgs:1},removeFormData:{minArgs:1,maxArgs:1},removeHistory:{minArgs:1,maxArgs:1},removeLocalStorage:{minArgs:1,maxArgs:1},removePasswords:{minArgs:1,maxArgs:1},removePluginData:{minArgs:1,maxArgs:1},settings:{minArgs:0,maxArgs:0}},commands:{getAll:{minArgs:0,maxArgs:0}},contextMenus:{remove:{minArgs:1,maxArgs:1},removeAll:{minArgs:0,maxArgs:0},update:{minArgs:2,maxArgs:2}},cookies:{get:{minArgs:1,maxArgs:1},getAll:{minArgs:1,maxArgs:1},getAllCookieStores:{minArgs:0,maxArgs:0},remove:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}},devtools:{inspectedWindow:{eval:{minArgs:1,maxArgs:2,singleCallbackArg:!1}},panels:{create:{minArgs:3,maxArgs:3,singleCallbackArg:!0},elements:{createSidebarPane:{minArgs:1,maxArgs:1}}}},downloads:{cancel:{minArgs:1,maxArgs:1},download:{minArgs:1,maxArgs:1},erase:{minArgs:1,maxArgs:1},getFileIcon:{minArgs:1,maxArgs:2},open:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},pause:{minArgs:1,maxArgs:1},removeFile:{minArgs:1,maxArgs:1},resume:{minArgs:1,maxArgs:1},search:{minArgs:1,maxArgs:1},show:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0}},extension:{isAllowedFileSchemeAccess:{minArgs:0,maxArgs:0},isAllowedIncognitoAccess:{minArgs:0,maxArgs:0}},history:{addUrl:{minArgs:1,maxArgs:1},deleteAll:{minArgs:0,maxArgs:0},deleteRange:{minArgs:1,maxArgs:1},deleteUrl:{minArgs:1,maxArgs:1},getVisits:{minArgs:1,maxArgs:1},search:{minArgs:1,maxArgs:1}},i18n:{detectLanguage:{minArgs:1,maxArgs:1},getAcceptLanguages:{minArgs:0,maxArgs:0}},identity:{launchWebAuthFlow:{minArgs:1,maxArgs:1}},idle:{queryState:{minArgs:1,maxArgs:1}},management:{get:{minArgs:1,maxArgs:1},getAll:{minArgs:0,maxArgs:0},getSelf:{minArgs:0,maxArgs:0},setEnabled:{minArgs:2,maxArgs:2},uninstallSelf:{minArgs:0,maxArgs:1}},notifications:{clear:{minArgs:1,maxArgs:1},create:{minArgs:1,maxArgs:2},getAll:{minArgs:0,maxArgs:0},getPermissionLevel:{minArgs:0,maxArgs:0},update:{minArgs:2,maxArgs:2}},pageAction:{getPopup:{minArgs:1,maxArgs:1},getTitle:{minArgs:1,maxArgs:1},hide:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setIcon:{minArgs:1,maxArgs:1},setPopup:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setTitle:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},show:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0}},permissions:{contains:{minArgs:1,maxArgs:1},getAll:{minArgs:0,maxArgs:0},remove:{minArgs:1,maxArgs:1},request:{minArgs:1,maxArgs:1}},runtime:{getBackgroundPage:{minArgs:0,maxArgs:0},getPlatformInfo:{minArgs:0,maxArgs:0},openOptionsPage:{minArgs:0,maxArgs:0},requestUpdateCheck:{minArgs:0,maxArgs:0},sendMessage:{minArgs:1,maxArgs:3},sendNativeMessage:{minArgs:2,maxArgs:2},setUninstallURL:{minArgs:1,maxArgs:1}},sessions:{getDevices:{minArgs:0,maxArgs:1},getRecentlyClosed:{minArgs:0,maxArgs:1},restore:{minArgs:0,maxArgs:1}},storage:{local:{clear:{minArgs:0,maxArgs:0},get:{minArgs:0,maxArgs:1},getBytesInUse:{minArgs:0,maxArgs:1},remove:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}},managed:{get:{minArgs:0,maxArgs:1},getBytesInUse:{minArgs:0,maxArgs:1}},sync:{clear:{minArgs:0,maxArgs:0},get:{minArgs:0,maxArgs:1},getBytesInUse:{minArgs:0,maxArgs:1},remove:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}}},tabs:{captureVisibleTab:{minArgs:0,maxArgs:2},create:{minArgs:1,maxArgs:1},detectLanguage:{minArgs:0,maxArgs:1},discard:{minArgs:0,maxArgs:1},duplicate:{minArgs:1,maxArgs:1},executeScript:{minArgs:1,maxArgs:2},get:{minArgs:1,maxArgs:1},getCurrent:{minArgs:0,maxArgs:0},getZoom:{minArgs:0,maxArgs:1},getZoomSettings:{minArgs:0,maxArgs:1},goBack:{minArgs:0,maxArgs:1},goForward:{minArgs:0,maxArgs:1},highlight:{minArgs:1,maxArgs:1},insertCSS:{minArgs:1,maxArgs:2},move:{minArgs:2,maxArgs:2},query:{minArgs:1,maxArgs:1},reload:{minArgs:0,maxArgs:2},remove:{minArgs:1,maxArgs:1},removeCSS:{minArgs:1,maxArgs:2},sendMessage:{minArgs:2,maxArgs:3},setZoom:{minArgs:1,maxArgs:2},setZoomSettings:{minArgs:1,maxArgs:2},update:{minArgs:1,maxArgs:2}},topSites:{get:{minArgs:0,maxArgs:0}},webNavigation:{getAllFrames:{minArgs:1,maxArgs:1},getFrame:{minArgs:1,maxArgs:1}},webRequest:{handlerBehaviorChanged:{minArgs:0,maxArgs:0}},windows:{create:{minArgs:0,maxArgs:1},get:{minArgs:1,maxArgs:2},getAll:{minArgs:0,maxArgs:1},getCurrent:{minArgs:0,maxArgs:1},getLastFocused:{minArgs:0,maxArgs:1},remove:{minArgs:1,maxArgs:1},update:{minArgs:2,maxArgs:2}}};if(Object.keys(A).length===0)throw new Error("api-metadata.json has not been included in browser-polyfill");class d extends WeakMap{constructor(t,g=void 0){super(g),this.createItem=t}get(t){return this.has(t)||this.set(t,this.createItem(t)),super.get(t)}}const p=n=>n&&typeof n=="object"&&typeof n.then=="function",b=(n,t)=>(...g)=>{i.runtime.lastError?n.reject(new Error(i.runtime.lastError.message)):t.singleCallbackArg||g.length<=1&&t.singleCallbackArg!==!1?n.resolve(g[0]):n.resolve(g)},E=n=>n==1?"argument":"arguments",C=(n,t)=>function(c,...x){if(x.length<t.minArgs)throw new Error(`Expected at least ${t.minArgs} ${E(t.minArgs)} for ${n}(), got ${x.length}`);if(x.length>t.maxArgs)throw new Error(`Expected at most ${t.maxArgs} ${E(t.maxArgs)} for ${n}(), got ${x.length}`);return new Promise((h,w)=>{if(t.fallbackToNoCallback)try{c[n](...x,b({resolve:h,reject:w},t))}catch(o){console.warn(`${n} API method doesn't seem to support the callback parameter, falling back to call it without a callback: `,o),c[n](...x),t.fallbackToNoCallback=!1,t.noCallback=!0,h()}else t.noCallback?(c[n](...x),h()):c[n](...x,b({resolve:h,reject:w},t))})},v=(n,t,g)=>new Proxy(t,{apply(c,x,h){return g.call(x,n,...h)}});let T=Function.call.bind(Object.prototype.hasOwnProperty);const M=(n,t={},g={})=>{let c=Object.create(null),x={has(w,o){return o in n||o in c},get(w,o,y){if(o in c)return c[o];if(!(o in n))return;let f=n[o];if(typeof f=="function")if(typeof t[o]=="function")f=v(n,n[o],t[o]);else if(T(g,o)){let S=C(o,g[o]);f=v(n,n[o],S)}else f=f.bind(n);else if(typeof f=="object"&&f!==null&&(T(t,o)||T(g,o)))f=M(f,t[o],g[o]);else if(T(g,"*"))f=M(f,t[o],g["*"]);else return Object.defineProperty(c,o,{configurable:!0,enumerable:!0,get(){return n[o]},set(S){n[o]=S}}),f;return c[o]=f,f},set(w,o,y,f){return o in c?c[o]=y:n[o]=y,!0},defineProperty(w,o,y){return Reflect.defineProperty(c,o,y)},deleteProperty(w,o){return Reflect.deleteProperty(c,o)}},h=Object.create(n);return new Proxy(h,x)},N=n=>({addListener(t,g,...c){t.addListener(n.get(g),...c)},hasListener(t,g){return t.hasListener(n.get(g))},removeListener(t,g){t.removeListener(n.get(g))}}),I=new d(n=>typeof n!="function"?n:function(g){const c=M(g,{},{getContent:{minArgs:0,maxArgs:0}});n(c)}),O=new d(n=>typeof n!="function"?n:function(g,c,x){let h=!1,w,o=new Promise(_=>{w=function(k){h=!0,_(k)}}),y;try{y=n(g,c,w)}catch(_){y=Promise.reject(_)}const f=y!==!0&&p(y);if(y!==!0&&!f&&!h)return!1;const S=_=>{_.then(k=>{x(k)},k=>{let $;k&&(k instanceof Error||typeof k.message=="string")?$=k.message:$="An unexpected error occurred",x({__mozWebExtensionPolyfillReject__:!0,message:$})}).catch(k=>{console.error("Failed to send onMessage rejected reply",k)})};return S(f?y:o),!0}),re=({reject:n,resolve:t},g)=>{i.runtime.lastError?i.runtime.lastError.message===u?t():n(new Error(i.runtime.lastError.message)):g&&g.__mozWebExtensionPolyfillReject__?n(new Error(g.message)):t(g)},R=(n,t,g,...c)=>{if(c.length<t.minArgs)throw new Error(`Expected at least ${t.minArgs} ${E(t.minArgs)} for ${n}(), got ${c.length}`);if(c.length>t.maxArgs)throw new Error(`Expected at most ${t.maxArgs} ${E(t.maxArgs)} for ${n}(), got ${c.length}`);return new Promise((x,h)=>{const w=re.bind(null,{resolve:x,reject:h});c.push(w),g.sendMessage(...c)})},se={devtools:{network:{onRequestFinished:N(I)}},runtime:{onMessage:N(O),onMessageExternal:N(O),sendMessage:R.bind(null,"sendMessage",{minArgs:1,maxArgs:3})},tabs:{sendMessage:R.bind(null,"sendMessage",{minArgs:2,maxArgs:3})}},L={clear:{minArgs:1,maxArgs:1},get:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}};return A.privacy={network:{"*":L},services:{"*":L},websites:{"*":L}},M(i,se,A)};s.exports=m(chrome)}else s.exports=globalThis.browser})})(ye);var nr=ye.exports;const ve=V(nr),tr=e=>{let r=[],s=[];return new Promise(a=>{ve.storage.local.get(["options","selectors"]).then(m=>{m.options&&(s=m.options),m.selectors&&(r=m.selectors)});let l="";for(const m of r)if(e.target.hasAttribute(m)){l=`[${m}=${e.target.getAttribute(m)}]`;break}if(!l){const m={root:document.body,idName:()=>!0,className:()=>!0,tagName:()=>!0,attr:i=>s.includes(i),seedMinLength:1,optimizedMinLength:2,threshold:1e3,maxNumberOfTries:1e4,timeoutMs:void 0};l=Je(e.target,m)}const u={selector:l,action:e.type,tag:e.target.tagName,value:e.target.value};e.target.hasAttribute("href")&&(u.href=e.target.href),e.target.hasAttribute("id")&&(u.id=e.target.id),u.tag==="INPUT"&&(u.inputType=e.target.type),e.type==="keydown"&&(u.key=e.key),a(u)})},Ee=async e=>{if(e.isTrusted!==!0)return;const r=await tr(e);Ge("content-event-message",{event:r}).then(()=>console.log("[cypress-recorder][content]发送消息成功",r)).catch(s=>console.error("[cypress-recorder][content]发送消息失败：",s))},or=()=>{console.log("[cypress-recorder][content]添加DOM监听事件"),Object.values(ee).forEach(e=>{document.addEventListener(e,Ee,{capture:!0,passive:!0})})},ar=()=>{console.log("[cypress-recorder][content]移除DOM监听事件"),Object.values(ee).forEach(e=>{document.removeEventListener(e,Ee,{capture:!0})})};(()=>{console.log(`[cypress-recorder][content]${new Date().toLocaleString()}已加载`);const e=ve.runtime.connect({name:window.location.hostname});console.log("[cypress-recorder][content]当前端口已连接：",e),e.onDisconnect.addListener(ar),or()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
