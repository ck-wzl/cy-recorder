(function(){"use strict";var $t=typeof globalThis<"u"?globalThis:typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{};function ot(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}var it={exports:{}};const Ur=e=>typeof crypto<"u"&&typeof crypto.getRandomValues=="function"?()=>{const t=crypto.getRandomValues(new Uint8Array(1))[0];return(t>=e?t%e:t).toString(e)}:()=>Math.floor(Math.random()*e).toString(e),kt=(e=7,t=!1)=>Array.from({length:e},Ur(t?16:36)).join("");it.exports=kt,it.exports.default=kt;var Wr=it.exports;const Ne=ot(Wr);var Hr=()=>`uid::${Ne(7)}`,Vr=(e,t=["endpointName","fingerprint"])=>typeof e=="object"&&e!==null&&t.every(r=>r in e),zr=e=>{try{const t=JSON.parse(e);return Vr(t)?t:null}catch{return null}},qr=()=>{let e=[];return{add:(...t)=>{e=[...e,...t]},remove:t=>{e=typeof t=="string"?e.filter(r=>r.message.transactionId!==t):e.filter(r=>!t.includes(r))},entries:()=>e}},Se=class{static toBackground(e,t){return e.postMessage(t)}static toExtensionContext(e,t){return e.postMessage(t)}},Kr=Object.defineProperty,Jr=Object.defineProperties,Gr=Object.getOwnPropertyDescriptors,Nt=Object.getOwnPropertySymbols,Zr=Object.prototype.hasOwnProperty,Yr=Object.prototype.propertyIsEnumerable,jt=(e,t,r)=>t in e?Kr(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r,Y=(e,t)=>{for(var r in t||(t={}))Zr.call(t,r)&&jt(e,r,t[r]);if(Nt)for(var r of Nt(t))Yr.call(t,r)&&jt(e,r,t[r]);return e},at=(e,t)=>Jr(e,Gr(t)),Qr=/^((?:background$)|devtools|popup|options|content-script|window)(?:@(\d+)(?:\.(\d+))?)?$/,lt=e=>{const[,t,r,n]=e.match(Qr)||[];return{context:t,tabId:+r,frameId:n?+n:void 0}},je=({context:e,tabId:t,frameId:r})=>["background","popup","options"].includes(e)?e:`${e}@${t}${r?`.${r}`:""}`;const Xr=[{property:"name",enumerable:!1},{property:"message",enumerable:!1},{property:"stack",enumerable:!1},{property:"code",enumerable:!0}],ct=Symbol(".toJSON was called"),en=e=>{e[ct]=!0;const t=e.toJSON();return delete e[ct],t},Ft=({from:e,seen:t,to_:r,forceEnumerable:n,maxDepth:s,depth:o})=>{const i=r||(Array.isArray(e)?[]:{});if(t.push(e),o>=s)return i;if(typeof e.toJSON=="function"&&e[ct]!==!0)return en(e);for(const[a,g]of Object.entries(e)){if(typeof Buffer=="function"&&Buffer.isBuffer(g)){i[a]="[object Buffer]";continue}if(g!==null&&typeof g=="object"&&typeof g.pipe=="function"){i[a]="[object Stream]";continue}if(typeof g!="function"){if(!g||typeof g!="object"){i[a]=g;continue}if(!t.includes(e[a])){o++,i[a]=Ft({from:e[a],seen:[...t],forceEnumerable:n,maxDepth:s,depth:o});continue}i[a]="[Circular]"}}for(const{property:a,enumerable:g}of Xr)typeof e[a]=="string"&&Object.defineProperty(i,a,{value:e[a],enumerable:n?!0:g,configurable:!0,writable:!0});return i};function tn(e,t={}){const{maxDepth:r=Number.POSITIVE_INFINITY}=t;return typeof e=="object"&&e!==null?Ft({from:e,seen:[],forceEnumerable:!0,maxDepth:r,depth:0}):typeof e=="function"?`[Function: ${e.name||"anonymous"}]`:e}let Lt=()=>({events:{},emit(e,...t){(this.events[e]||[]).forEach(r=>r(...t))},on(e,t){return(this.events[e]=this.events[e]||[]).push(t),()=>this.events[e]=(this.events[e]||[]).filter(r=>r!==t)}});var rn=(e,t,r)=>{const n=Ne(),s=new Map,o=new Map,i=a=>{if(a.destination.context===e&&!a.destination.frameId&&!a.destination.tabId){r==null||r(a);const{transactionId:g,messageID:p,messageType:h}=a,c=()=>{const x=s.get(g);if(x){const{err:b,data:E}=a;if(b){const S=b,I=self[S.name],R=new(typeof I=="function"?I:Error)(S.message);for(const L in S)R[L]=S[L];x.reject(R)}else x.resolve(E);s.delete(g)}},A=async()=>{let x,b,E=!1;try{const S=o.get(p);if(typeof S=="function")x=await S({sender:a.origin,id:p,data:a.data,timestamp:a.timestamp});else throw E=!0,new Error(`[webext-bridge] No handler registered in '${e}' to accept messages with id '${p}'`)}catch(S){b=S}finally{if(b&&(a.err=tn(b)),i(at(Y({},a),{messageType:"reply",data:x,origin:{context:e,tabId:null},destination:a.origin,hops:[]})),b&&!E)throw x}};switch(h){case"reply":return c();case"message":return A()}}return a.hops.push(`${e}::${n}`),t(a)};return{handleMessage:i,endTransaction:a=>{const g=s.get(a);g==null||g.reject("Transaction was ended before it could complete"),s.delete(a)},sendMessage:(a,g,p="background")=>{const h=typeof p=="string"?lt(p):p,c="Bridge#sendMessage ->";if(!h.context)throw new TypeError(`${c} Destination must be any one of known destinations`);return new Promise((A,x)=>{const b={messageID:a,data:g,destination:h,messageType:"message",transactionId:Ne(),origin:{context:e,tabId:null},hops:[],timestamp:Date.now()};s.set(b.transactionId,{resolve:A,reject:x});try{i(b)}catch(E){s.delete(b.transactionId),x(E)}})},onMessage:(a,g)=>(o.set(a,g),()=>o.delete(a))}},xe=class{constructor(e,t){this.endpointRuntime=e,this.streamInfo=t,this.emitter=Lt(),this.isClosed=!1,this.handleStreamClose=()=>{this.isClosed||(this.isClosed=!0,this.emitter.emit("closed",!0),this.emitter.events={})},xe.initDone||(e.onMessage("__crx_bridge_stream_transfer__",r=>{const{streamId:n,streamTransfer:s,action:o}=r.data,i=xe.openStreams.get(n);i&&!i.isClosed&&(o==="transfer"&&i.emitter.emit("message",s),o==="close"&&(xe.openStreams.delete(n),i.handleStreamClose()))}),xe.initDone=!0),xe.openStreams.set(this.streamInfo.streamId,this)}get info(){return this.streamInfo}send(e){if(this.isClosed)throw new Error("Attempting to send a message over closed stream. Use stream.onClose(<callback>) to keep an eye on stream status");this.endpointRuntime.sendMessage("__crx_bridge_stream_transfer__",{streamId:this.streamInfo.streamId,streamTransfer:e,action:"transfer"},this.streamInfo.endpoint)}close(e){e&&this.send(e),this.handleStreamClose(),this.endpointRuntime.sendMessage("__crx_bridge_stream_transfer__",{streamId:this.streamInfo.streamId,streamTransfer:null,action:"close"},this.streamInfo.endpoint)}onMessage(e){return this.getDisposable("message",e)}onClose(e){return this.getDisposable("closed",e)}getDisposable(e,t){const r=this.emitter.on(e,t);return Object.assign(r,{dispose:r,close:r})}},Fe=xe;Fe.initDone=!1,Fe.openStreams=new Map;var nn=e=>{const t=new Map,r=new Map,n=Lt();e.onMessage("__crx_bridge_stream_open__",i=>new Promise(a=>{const{sender:g,data:p}=i,{channel:h}=p;let c=!1,A=()=>{};const x=()=>{const b=r.get(h);typeof b=="function"?(b(new Fe(e,at(Y({},p),{endpoint:g}))),c&&A(),a(!0)):c||(c=!0,A=n.on("did-change-stream-callbacks",x))};x()}));async function s(i,a){if(t.has(i))throw new Error("webext-bridge: A Stream is already open at this channel");const g=typeof a=="string"?lt(a):a,p={streamId:Ne(),channel:i,endpoint:g},h=new Fe(e,p);return h.onClose(()=>t.delete(i)),await e.sendMessage("__crx_bridge_stream_open__",p,g),t.set(i,h),h}function o(i,a){if(r.has(i))throw new Error("webext-bridge: This channel has already been claimed. Stream allows only one-on-one communication");r.set(i,a),n.emit("did-change-stream-callbacks")}return{openStream:s,onOpenStreamChannel:o}},Dt={exports:{}};(function(e,t){(function(r,n){n(e)})(typeof globalThis<"u"?globalThis:typeof self<"u"?self:$t,function(r){if(typeof globalThis!="object"||typeof chrome!="object"||!chrome||!chrome.runtime||!chrome.runtime.id)throw new Error("This script should only be loaded in a browser extension.");if(typeof globalThis.browser>"u"||Object.getPrototypeOf(globalThis.browser)!==Object.prototype){const n="The message port closed before a response was received.",s="Returning a Promise is the preferred way to send a reply from an onMessage/onMessageExternal listener, as the sendResponse will be removed from the specs (See https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/runtime/onMessage)",o=i=>{const a={alarms:{clear:{minArgs:0,maxArgs:1},clearAll:{minArgs:0,maxArgs:0},get:{minArgs:0,maxArgs:1},getAll:{minArgs:0,maxArgs:0}},bookmarks:{create:{minArgs:1,maxArgs:1},get:{minArgs:1,maxArgs:1},getChildren:{minArgs:1,maxArgs:1},getRecent:{minArgs:1,maxArgs:1},getSubTree:{minArgs:1,maxArgs:1},getTree:{minArgs:0,maxArgs:0},move:{minArgs:2,maxArgs:2},remove:{minArgs:1,maxArgs:1},removeTree:{minArgs:1,maxArgs:1},search:{minArgs:1,maxArgs:1},update:{minArgs:2,maxArgs:2}},browserAction:{disable:{minArgs:0,maxArgs:1,fallbackToNoCallback:!0},enable:{minArgs:0,maxArgs:1,fallbackToNoCallback:!0},getBadgeBackgroundColor:{minArgs:1,maxArgs:1},getBadgeText:{minArgs:1,maxArgs:1},getPopup:{minArgs:1,maxArgs:1},getTitle:{minArgs:1,maxArgs:1},openPopup:{minArgs:0,maxArgs:0},setBadgeBackgroundColor:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setBadgeText:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setIcon:{minArgs:1,maxArgs:1},setPopup:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setTitle:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0}},browsingData:{remove:{minArgs:2,maxArgs:2},removeCache:{minArgs:1,maxArgs:1},removeCookies:{minArgs:1,maxArgs:1},removeDownloads:{minArgs:1,maxArgs:1},removeFormData:{minArgs:1,maxArgs:1},removeHistory:{minArgs:1,maxArgs:1},removeLocalStorage:{minArgs:1,maxArgs:1},removePasswords:{minArgs:1,maxArgs:1},removePluginData:{minArgs:1,maxArgs:1},settings:{minArgs:0,maxArgs:0}},commands:{getAll:{minArgs:0,maxArgs:0}},contextMenus:{remove:{minArgs:1,maxArgs:1},removeAll:{minArgs:0,maxArgs:0},update:{minArgs:2,maxArgs:2}},cookies:{get:{minArgs:1,maxArgs:1},getAll:{minArgs:1,maxArgs:1},getAllCookieStores:{minArgs:0,maxArgs:0},remove:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}},devtools:{inspectedWindow:{eval:{minArgs:1,maxArgs:2,singleCallbackArg:!1}},panels:{create:{minArgs:3,maxArgs:3,singleCallbackArg:!0},elements:{createSidebarPane:{minArgs:1,maxArgs:1}}}},downloads:{cancel:{minArgs:1,maxArgs:1},download:{minArgs:1,maxArgs:1},erase:{minArgs:1,maxArgs:1},getFileIcon:{minArgs:1,maxArgs:2},open:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},pause:{minArgs:1,maxArgs:1},removeFile:{minArgs:1,maxArgs:1},resume:{minArgs:1,maxArgs:1},search:{minArgs:1,maxArgs:1},show:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0}},extension:{isAllowedFileSchemeAccess:{minArgs:0,maxArgs:0},isAllowedIncognitoAccess:{minArgs:0,maxArgs:0}},history:{addUrl:{minArgs:1,maxArgs:1},deleteAll:{minArgs:0,maxArgs:0},deleteRange:{minArgs:1,maxArgs:1},deleteUrl:{minArgs:1,maxArgs:1},getVisits:{minArgs:1,maxArgs:1},search:{minArgs:1,maxArgs:1}},i18n:{detectLanguage:{minArgs:1,maxArgs:1},getAcceptLanguages:{minArgs:0,maxArgs:0}},identity:{launchWebAuthFlow:{minArgs:1,maxArgs:1}},idle:{queryState:{minArgs:1,maxArgs:1}},management:{get:{minArgs:1,maxArgs:1},getAll:{minArgs:0,maxArgs:0},getSelf:{minArgs:0,maxArgs:0},setEnabled:{minArgs:2,maxArgs:2},uninstallSelf:{minArgs:0,maxArgs:1}},notifications:{clear:{minArgs:1,maxArgs:1},create:{minArgs:1,maxArgs:2},getAll:{minArgs:0,maxArgs:0},getPermissionLevel:{minArgs:0,maxArgs:0},update:{minArgs:2,maxArgs:2}},pageAction:{getPopup:{minArgs:1,maxArgs:1},getTitle:{minArgs:1,maxArgs:1},hide:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setIcon:{minArgs:1,maxArgs:1},setPopup:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setTitle:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},show:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0}},permissions:{contains:{minArgs:1,maxArgs:1},getAll:{minArgs:0,maxArgs:0},remove:{minArgs:1,maxArgs:1},request:{minArgs:1,maxArgs:1}},runtime:{getBackgroundPage:{minArgs:0,maxArgs:0},getPlatformInfo:{minArgs:0,maxArgs:0},openOptionsPage:{minArgs:0,maxArgs:0},requestUpdateCheck:{minArgs:0,maxArgs:0},sendMessage:{minArgs:1,maxArgs:3},sendNativeMessage:{minArgs:2,maxArgs:2},setUninstallURL:{minArgs:1,maxArgs:1}},sessions:{getDevices:{minArgs:0,maxArgs:1},getRecentlyClosed:{minArgs:0,maxArgs:1},restore:{minArgs:0,maxArgs:1}},storage:{local:{clear:{minArgs:0,maxArgs:0},get:{minArgs:0,maxArgs:1},getBytesInUse:{minArgs:0,maxArgs:1},remove:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}},managed:{get:{minArgs:0,maxArgs:1},getBytesInUse:{minArgs:0,maxArgs:1}},sync:{clear:{minArgs:0,maxArgs:0},get:{minArgs:0,maxArgs:1},getBytesInUse:{minArgs:0,maxArgs:1},remove:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}}},tabs:{captureVisibleTab:{minArgs:0,maxArgs:2},create:{minArgs:1,maxArgs:1},detectLanguage:{minArgs:0,maxArgs:1},discard:{minArgs:0,maxArgs:1},duplicate:{minArgs:1,maxArgs:1},executeScript:{minArgs:1,maxArgs:2},get:{minArgs:1,maxArgs:1},getCurrent:{minArgs:0,maxArgs:0},getZoom:{minArgs:0,maxArgs:1},getZoomSettings:{minArgs:0,maxArgs:1},goBack:{minArgs:0,maxArgs:1},goForward:{minArgs:0,maxArgs:1},highlight:{minArgs:1,maxArgs:1},insertCSS:{minArgs:1,maxArgs:2},move:{minArgs:2,maxArgs:2},query:{minArgs:1,maxArgs:1},reload:{minArgs:0,maxArgs:2},remove:{minArgs:1,maxArgs:1},removeCSS:{minArgs:1,maxArgs:2},sendMessage:{minArgs:2,maxArgs:3},setZoom:{minArgs:1,maxArgs:2},setZoomSettings:{minArgs:1,maxArgs:2},update:{minArgs:1,maxArgs:2}},topSites:{get:{minArgs:0,maxArgs:0}},webNavigation:{getAllFrames:{minArgs:1,maxArgs:1},getFrame:{minArgs:1,maxArgs:1}},webRequest:{handlerBehaviorChanged:{minArgs:0,maxArgs:0}},windows:{create:{minArgs:0,maxArgs:1},get:{minArgs:1,maxArgs:2},getAll:{minArgs:0,maxArgs:1},getCurrent:{minArgs:0,maxArgs:1},getLastFocused:{minArgs:0,maxArgs:1},remove:{minArgs:1,maxArgs:1},update:{minArgs:2,maxArgs:2}}};if(Object.keys(a).length===0)throw new Error("api-metadata.json has not been included in browser-polyfill");class g extends WeakMap{constructor(u,d=void 0){super(d),this.createItem=u}get(u){return this.has(u)||this.set(u,this.createItem(u)),super.get(u)}}const p=l=>l&&typeof l=="object"&&typeof l.then=="function",h=(l,u)=>(...d)=>{i.runtime.lastError?l.reject(new Error(i.runtime.lastError.message)):u.singleCallbackArg||d.length<=1&&u.singleCallbackArg!==!1?l.resolve(d[0]):l.resolve(d)},c=l=>l==1?"argument":"arguments",A=(l,u)=>function(m,...v){if(v.length<u.minArgs)throw new Error(`Expected at least ${u.minArgs} ${c(u.minArgs)} for ${l}(), got ${v.length}`);if(v.length>u.maxArgs)throw new Error(`Expected at most ${u.maxArgs} ${c(u.maxArgs)} for ${l}(), got ${v.length}`);return new Promise((C,P)=>{if(u.fallbackToNoCallback)try{m[l](...v,h({resolve:C,reject:P},u))}catch(f){console.warn(`${l} API method doesn't seem to support the callback parameter, falling back to call it without a callback: `,f),m[l](...v),u.fallbackToNoCallback=!1,u.noCallback=!0,C()}else u.noCallback?(m[l](...v),C()):m[l](...v,h({resolve:C,reject:P},u))})},x=(l,u,d)=>new Proxy(u,{apply(m,v,C){return d.call(v,l,...C)}});let b=Function.call.bind(Object.prototype.hasOwnProperty);const E=(l,u={},d={})=>{let m=Object.create(null),v={has(P,f){return f in l||f in m},get(P,f,T){if(f in m)return m[f];if(!(f in l))return;let y=l[f];if(typeof y=="function")if(typeof u[f]=="function")y=x(l,l[f],u[f]);else if(b(d,f)){let U=A(f,d[f]);y=x(l,l[f],U)}else y=y.bind(l);else if(typeof y=="object"&&y!==null&&(b(u,f)||b(d,f)))y=E(y,u[f],d[f]);else if(b(d,"*"))y=E(y,u[f],d["*"]);else return Object.defineProperty(m,f,{configurable:!0,enumerable:!0,get(){return l[f]},set(U){l[f]=U}}),y;return m[f]=y,y},set(P,f,T,y){return f in m?m[f]=T:l[f]=T,!0},defineProperty(P,f,T){return Reflect.defineProperty(m,f,T)},deleteProperty(P,f){return Reflect.deleteProperty(m,f)}},C=Object.create(l);return new Proxy(C,v)},S=l=>({addListener(u,d,...m){u.addListener(l.get(d),...m)},hasListener(u,d){return u.hasListener(l.get(d))},removeListener(u,d){u.removeListener(l.get(d))}}),I=new g(l=>typeof l!="function"?l:function(d){const m=E(d,{},{getContent:{minArgs:0,maxArgs:0}});l(m)});let R=!1;const L=new g(l=>typeof l!="function"?l:function(d,m,v){let C=!1,P,f=new Promise(q=>{P=function(O){R||(console.warn(s,new Error().stack),R=!0),C=!0,q(O)}}),T;try{T=l(d,m,P)}catch(q){T=Promise.reject(q)}const y=T!==!0&&p(T);if(T!==!0&&!y&&!C)return!1;const U=q=>{q.then(O=>{v(O)},O=>{let he;O&&(O instanceof Error||typeof O.message=="string")?he=O.message:he="An unexpected error occurred",v({__mozWebExtensionPolyfillReject__:!0,message:he})}).catch(O=>{console.error("Failed to send onMessage rejected reply",O)})};return U(y?T:f),!0}),$=({reject:l,resolve:u},d)=>{i.runtime.lastError?i.runtime.lastError.message===n?u():l(new Error(i.runtime.lastError.message)):d&&d.__mozWebExtensionPolyfillReject__?l(new Error(d.message)):u(d)},oe=(l,u,d,...m)=>{if(m.length<u.minArgs)throw new Error(`Expected at least ${u.minArgs} ${c(u.minArgs)} for ${l}(), got ${m.length}`);if(m.length>u.maxArgs)throw new Error(`Expected at most ${u.maxArgs} ${c(u.maxArgs)} for ${l}(), got ${m.length}`);return new Promise((v,C)=>{const P=$.bind(null,{resolve:v,reject:C});m.push(P),d.sendMessage(...m)})},Ae={devtools:{network:{onRequestFinished:S(I)}},runtime:{onMessage:S(L),onMessageExternal:S(L),sendMessage:oe.bind(null,"sendMessage",{minArgs:1,maxArgs:3})},tabs:{sendMessage:oe.bind(null,"sendMessage",{minArgs:2,maxArgs:3})}},w={clear:{minArgs:1,maxArgs:1},get:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}};return a.privacy={network:{"*":w},services:{"*":w},websites:{"*":w}},E(i,Ae,a)};r.exports=o(chrome)}else r.exports=globalThis.browser})})(Dt);var sn=Dt.exports;const on=ot(sn);var Ee=qr(),B=new Map,be=new Map,Le=new Map,Bt=(e,t)=>(be.set(e,(be.get(e)||new Set).add(t)),()=>{const r=be.get(e);r!=null&&r.delete(t)&&(r==null?void 0:r.size)===0&&be.delete(e)}),Ut=(e,t)=>{Le.set(e,(Le.get(e)||new Set).add(t))},ie=e=>({withFingerprint:t=>{const r=s=>({and:()=>s}),n={aboutIncomingMessage:s=>{const o=B.get(e);return Se.toExtensionContext(o.port,{status:"incoming",message:s}),r(n)},aboutSuccessfulDelivery:s=>{const o=B.get(e);return Se.toExtensionContext(o.port,{status:"delivered",receipt:s}),r(n)},aboutMessageUndeliverability:(s,o)=>{const i=B.get(e);return(i==null?void 0:i.fingerprint)===t&&Se.toExtensionContext(i.port,{status:"undeliverable",resolvedDestination:s,message:o}),r(n)},whenDeliverableTo:s=>{const o=()=>{const i=B.get(e);if((i==null?void 0:i.fingerprint)===t&&B.has(s))return Se.toExtensionContext(i.port,{status:"deliverable",deliverableTo:s}),!0};if(!o()){const i=Bt(s,o);Ut(t,i)}return r(n)},aboutSessionEnded:s=>{const o=B.get(e);return(o==null?void 0:o.fingerprint)===t&&Se.toExtensionContext(o.port,{status:"terminated",fingerprint:s}),r(n)}};return n}}),an=Hr(),De=rn("background",e=>{var t;if(e.origin.context==="background"&&["content-script","devtools "].includes(e.destination.context)&&!e.destination.tabId)throw new TypeError("When sending messages from background page, use @tabId syntax to target specific tab");const r=je(Y(Y({},e.origin),e.origin.context==="window"&&{context:"content-script"})),n=je(at(Y(Y({},e.destination),e.destination.context==="window"&&{context:"content-script"}),{tabId:e.destination.tabId||e.origin.tabId}));e.destination.tabId=null,e.destination.frameId=null;const s=()=>B.get(n),o=()=>B.get(r),i=()=>{var a;ie(n).withFingerprint(s().fingerprint).aboutIncomingMessage(e);const g={message:e,to:s().fingerprint,from:{endpointId:r,fingerprint:(a=o())==null?void 0:a.fingerprint}};e.messageType==="message"&&Ee.add(g),e.messageType==="reply"&&Ee.remove(e.messageID),o()&&ie(r).withFingerprint(o().fingerprint).aboutSuccessfulDelivery(g)};(t=s())!=null&&t.port?i():e.messageType==="message"&&(e.origin.context==="background"?Bt(n,i):o()&&ie(r).withFingerprint(o().fingerprint).aboutMessageUndeliverability(n,e).and().whenDeliverableTo(n))},e=>{const t=je(Y(Y({},e.origin),e.origin.context==="window"&&{context:"content-script"})),r=B.get(t),n={message:e,to:an,from:{endpointId:t,fingerprint:r.fingerprint}};ie(t).withFingerprint(r.fingerprint).aboutSuccessfulDelivery(n)});on.runtime.onConnect.addListener(e=>{var t;const r=zr(e.name);if(!r)return;r.endpointName||(r.endpointName=je({context:"content-script",tabId:e.sender.tab.id,frameId:e.sender.frameId}));const{tabId:n,frameId:s}=lt(r.endpointName);B.set(r.endpointName,{fingerprint:r.fingerprint,port:e}),(t=be.get(r.endpointName))==null||t.forEach(o=>o()),be.delete(r.endpointName),Ut(r.fingerprint,()=>{const o=Ee.entries().filter(i=>i.to===r.fingerprint);Ee.remove(o),o.forEach(i=>{i.from.endpointId==="background"?De.endTransaction(i.message.transactionId):ie(i.from.endpointId).withFingerprint(i.from.fingerprint).aboutSessionEnded(r.fingerprint)})}),e.onDisconnect.addListener(()=>{var o,i;((o=B.get(r.endpointName))==null?void 0:o.fingerprint)===r.fingerprint&&B.delete(r.endpointName),(i=Le.get(r.fingerprint))==null||i.forEach(a=>a()),Le.delete(r.fingerprint)}),e.onMessage.addListener(o=>{var i,a;if(o.type==="sync"){const g=[...B.values()].map(h=>h.fingerprint),p=o.pendingResponses.filter(h=>g.includes(h.to));Ee.add(...p),o.pendingResponses.filter(h=>!g.includes(h.to)).forEach(h=>ie(r.endpointName).withFingerprint(r.fingerprint).aboutSessionEnded(h.to)),o.pendingDeliveries.forEach(h=>ie(r.endpointName).withFingerprint(r.fingerprint).whenDeliverableTo(h));return}o.type==="deliver"&&((a=(i=o.message)==null?void 0:i.origin)!=null&&a.context)&&(o.message.origin.tabId=n,o.message.origin.frameId=s,De.handleMessage(o.message))})});var{sendMessage:Js,onMessage:Wt}=De;nn(De);var ae=(e=>(e.On="on",e.Off="off",e.Paused="paused",e))(ae||{}),Ce=(e=>(e.Start="start",e.Pause="pause",e.Resume="resume",e.Reset="reset",e.Add="add",e.Move="move",e.Delete="delete",e))(Ce||{}),le=(e=>(e.Click="click",e.DblClick="dblclick",e.KeyDown="keydown",e.Change="change",e.Submit="submit",e))(le||{});const ln=e=>new Promise((t,r)=>{t(`cy.get('${e.selector}').click();`)}),cn=e=>new Promise((t,r)=>{t(`cy.get('${e.selector}').dblclick();`)}),un=e=>new Promise((t,r)=>{switch(e.key){case"Backspace":t(`cy.get('${e.selector}').type('{backspace}');`);case"Escape":t(`cy.get('${e.selector}').type('{esc}');`);case"ArrowUp":t(`cy.get('${e.selector}').type('{uparrow}');`);case"ArrowRight":t(`cy.get('${e.selector}').type('{rightarrow}');`);case"ArrowDown":t(`cy.get('${e.selector}').type('{downarrow}');`);case"ArrowLeft":t(`cy.get('${e.selector}').type('{leftarrow}');`);default:t(null)}}),gn=e=>new Promise((t,r)=>{(e.inputType==="checkbox"||e.inputType==="radio")&&t(null),t(`cy.get('${e.selector}').type('${e.value.replace(/'/g,"\\'")}');`)}),fn=e=>new Promise((t,r)=>{t(`cy.get('${e.selector}').submit();`)}),dn=e=>{const{origin:t,pathname:r}=new URL(e);return`cy.url().should('contains', '${t+r}');`},mn=e=>`cy.visit('${e}');`,pn=e=>{switch(e.action){case le.Click:return ln(e);case le.DblClick:return cn(e);case le.KeyDown:return un(e);case le.Change:return gn(e);case le.Submit:return fn(e);default:throw new Error(`[cypress-recorder] Uncaptured Events: ${e.action}`)}};/**
* @vue/shared v3.4.21
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/function An(e,t){const r=new Set(e.split(","));return t?n=>r.has(n.toLowerCase()):n=>r.has(n)}const J=Object.freeze({}),Be=()=>{},G=Object.assign,hn=(e,t)=>{const r=e.indexOf(t);r>-1&&e.splice(r,1)},xn=Object.prototype.hasOwnProperty,M=(e,t)=>xn.call(e,t),k=Array.isArray,we=e=>We(e)==="[object Map]",bn=e=>We(e)==="[object Set]",N=e=>typeof e=="function",ut=e=>typeof e=="string",Ue=e=>typeof e=="symbol",K=e=>e!==null&&typeof e=="object",wn=e=>(K(e)||N(e))&&N(e.then)&&N(e.catch),yn=Object.prototype.toString,We=e=>yn.call(e),Ht=e=>We(e).slice(8,-1),_n=e=>We(e)==="[object Object]",gt=e=>ut(e)&&e!=="NaN"&&e[0]!=="-"&&""+parseInt(e,10)===e,vn=(e=>{const t=Object.create(null);return r=>t[r]||(t[r]=e(r))})(e=>e.charAt(0).toUpperCase()+e.slice(1)),Q=(e,t)=>!Object.is(e,t),Sn=(e,t,r)=>{Object.defineProperty(e,t,{configurable:!0,enumerable:!1,value:r})};let Vt;const zt=()=>Vt||(Vt=typeof globalThis<"u"?globalThis:typeof self<"u"?self:typeof window<"u"?window:typeof global<"u"?global:{});/**
* @vue/reactivity v3.4.21
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/function ce(e,...t){console.warn(`[Vue warn] ${e}`,...t)}let qt;function En(e,t=qt){t&&t.active&&t.effects.push(e)}function Kt(){return qt}function Cn(e){ce("onScopeDispose() is called when there is no active effect scope to be associated with.")}let ue;class Jt{constructor(t,r,n,s){this.fn=t,this.trigger=r,this.scheduler=n,this.active=!0,this.deps=[],this._dirtyLevel=4,this._trackId=0,this._runnings=0,this._shouldSchedule=!1,this._depsLength=0,En(this,s)}get dirty(){if(this._dirtyLevel===2||this._dirtyLevel===3){this._dirtyLevel=1,dt();for(let t=0;t<this._depsLength;t++){const r=this.deps[t];if(r.computed&&(Pn(r.computed),this._dirtyLevel>=4))break}this._dirtyLevel===1&&(this._dirtyLevel=0),mt()}return this._dirtyLevel>=4}set dirty(t){this._dirtyLevel=t?4:0}run(){if(this._dirtyLevel=0,!this.active)return this.fn();let t=X,r=ue;try{return X=!0,ue=this,this._runnings++,Gt(this),this.fn()}finally{Zt(this),this._runnings--,ue=r,X=t}}stop(){var t;this.active&&(Gt(this),Zt(this),(t=this.onStop)==null||t.call(this),this.active=!1)}}function Pn(e){return e.value}function Gt(e){e._trackId++,e._depsLength=0}function Zt(e){if(e.deps.length>e._depsLength){for(let t=e._depsLength;t<e.deps.length;t++)Yt(e.deps[t],e);e.deps.length=e._depsLength}}function Yt(e,t){const r=e.get(t);r!==void 0&&t._trackId!==r&&(e.delete(t),e.size===0&&e.cleanup())}let X=!0,ft=0;const Qt=[];function dt(){Qt.push(X),X=!1}function mt(){const e=Qt.pop();X=e===void 0?!0:e}function pt(){ft++}function At(){for(ft--;!ft&&ht.length;)ht.shift()()}function Xt(e,t,r){var n;if(t.get(e)!==e._trackId){t.set(e,e._trackId);const s=e.deps[e._depsLength];s!==t?(s&&Yt(s,e),e.deps[e._depsLength++]=t):e._depsLength++,(n=e.onTrack)==null||n.call(e,G({effect:e},r))}}const ht=[];function er(e,t,r){var n;pt();for(const s of e.keys()){let o;s._dirtyLevel<t&&(o??(o=e.get(s)===s._trackId))&&(s._shouldSchedule||(s._shouldSchedule=s._dirtyLevel===0),s._dirtyLevel=t),s._shouldSchedule&&(o??(o=e.get(s)===s._trackId))&&((n=s.onTrigger)==null||n.call(s,G({effect:s},r)),s.trigger(),(!s._runnings||s.allowRecurse)&&s._dirtyLevel!==2&&(s._shouldSchedule=!1,s.scheduler&&ht.push(s.scheduler)))}At()}const tr=(e,t)=>{const r=new Map;return r.cleanup=e,r.computed=t,r},xt=new WeakMap,ge=Symbol("iterate"),bt=Symbol("Map key iterate");function D(e,t,r){if(X&&ue){let n=xt.get(e);n||xt.set(e,n=new Map);let s=n.get(r);s||n.set(r,s=tr(()=>n.delete(r))),Xt(ue,s,{target:e,type:t,key:r})}}function ee(e,t,r,n,s,o){const i=xt.get(e);if(!i)return;let a=[];if(t==="clear")a=[...i.values()];else if(r==="length"&&k(e)){const g=Number(n);i.forEach((p,h)=>{(h==="length"||!Ue(h)&&h>=g)&&a.push(p)})}else switch(r!==void 0&&a.push(i.get(r)),t){case"add":k(e)?gt(r)&&a.push(i.get("length")):(a.push(i.get(ge)),we(e)&&a.push(i.get(bt)));break;case"delete":k(e)||(a.push(i.get(ge)),we(e)&&a.push(i.get(bt)));break;case"set":we(e)&&a.push(i.get(ge));break}pt();for(const g of a)g&&er(g,4,{target:e,type:t,key:r,newValue:n,oldValue:s,oldTarget:o});At()}const Tn=An("__proto__,__v_isRef,__isVue"),rr=new Set(Object.getOwnPropertyNames(Symbol).filter(e=>e!=="arguments"&&e!=="caller").map(e=>Symbol[e]).filter(Ue)),nr=In();function In(){const e={};return["includes","indexOf","lastIndexOf"].forEach(t=>{e[t]=function(...r){const n=_(this);for(let o=0,i=this.length;o<i;o++)D(n,"get",o+"");const s=n[t](...r);return s===-1||s===!1?n[t](...r.map(_)):s}}),["push","pop","shift","unshift","splice"].forEach(t=>{e[t]=function(...r){dt(),pt();const n=_(this)[t].apply(this,r);return At(),mt(),n}}),e}function Rn(e){const t=_(this);return D(t,"has",e),t.hasOwnProperty(e)}class sr{constructor(t=!1,r=!1){this._isReadonly=t,this._isShallow=r}get(t,r,n){const s=this._isReadonly,o=this._isShallow;if(r==="__v_isReactive")return!s;if(r==="__v_isReadonly")return s;if(r==="__v_isShallow")return o;if(r==="__v_raw")return n===(s?o?dr:fr:o?Hn:gr).get(t)||Object.getPrototypeOf(t)===Object.getPrototypeOf(n)?t:void 0;const i=k(t);if(!s){if(i&&M(nr,r))return Reflect.get(nr,r,n);if(r==="hasOwnProperty")return Rn}const a=Reflect.get(t,r,n);return(Ue(r)?rr.has(r):Tn(r))||(s||D(t,"get",r),o)?a:W(a)?i&&gt(r)?a:a.value:K(a)?s?pr(a):mr(a):a}}class On extends sr{constructor(t=!1){super(!1,t)}set(t,r,n,s){let o=t[r];if(!this._isShallow){const g=fe(o);if(!de(n)&&!fe(n)&&(o=_(o),n=_(n)),!k(t)&&W(o)&&!W(n))return g?!1:(o.value=n,!0)}const i=k(t)&&gt(r)?Number(r)<t.length:M(t,r),a=Reflect.set(t,r,n,s);return t===_(s)&&(i?Q(n,o)&&ee(t,"set",r,n,o):ee(t,"add",r,n)),a}deleteProperty(t,r){const n=M(t,r),s=t[r],o=Reflect.deleteProperty(t,r);return o&&n&&ee(t,"delete",r,void 0,s),o}has(t,r){const n=Reflect.has(t,r);return(!Ue(r)||!rr.has(r))&&D(t,"has",r),n}ownKeys(t){return D(t,"iterate",k(t)?"length":ge),Reflect.ownKeys(t)}}class or extends sr{constructor(t=!1){super(!0,t)}set(t,r){return ce(`Set operation on key "${String(r)}" failed: target is readonly.`,t),!0}deleteProperty(t,r){return ce(`Delete operation on key "${String(r)}" failed: target is readonly.`,t),!0}}const Mn=new On,$n=new or,kn=new or(!0),wt=e=>e,He=e=>Reflect.getPrototypeOf(e);function Ve(e,t,r=!1,n=!1){e=e.__v_raw;const s=_(e),o=_(t);r||(Q(t,o)&&D(s,"get",t),D(s,"get",o));const{has:i}=He(s),a=n?wt:r?vt:Pe;if(i.call(s,t))return a(e.get(t));if(i.call(s,o))return a(e.get(o));e!==s&&e.get(t)}function ze(e,t=!1){const r=this.__v_raw,n=_(r),s=_(e);return t||(Q(e,s)&&D(n,"has",e),D(n,"has",s)),e===s?r.has(e):r.has(e)||r.has(s)}function qe(e,t=!1){return e=e.__v_raw,!t&&D(_(e),"iterate",ge),Reflect.get(e,"size",e)}function ir(e){e=_(e);const t=_(this);return He(t).has.call(t,e)||(t.add(e),ee(t,"add",e,e)),this}function ar(e,t){t=_(t);const r=_(this),{has:n,get:s}=He(r);let o=n.call(r,e);o?ur(r,n,e):(e=_(e),o=n.call(r,e));const i=s.call(r,e);return r.set(e,t),o?Q(t,i)&&ee(r,"set",e,t,i):ee(r,"add",e,t),this}function lr(e){const t=_(this),{has:r,get:n}=He(t);let s=r.call(t,e);s?ur(t,r,e):(e=_(e),s=r.call(t,e));const o=n?n.call(t,e):void 0,i=t.delete(e);return s&&ee(t,"delete",e,void 0,o),i}function cr(){const e=_(this),t=e.size!==0,r=we(e)?new Map(e):new Set(e),n=e.clear();return t&&ee(e,"clear",void 0,void 0,r),n}function Ke(e,t){return function(n,s){const o=this,i=o.__v_raw,a=_(i),g=t?wt:e?vt:Pe;return!e&&D(a,"iterate",ge),i.forEach((p,h)=>n.call(s,g(p),g(h),o))}}function Je(e,t,r){return function(...n){const s=this.__v_raw,o=_(s),i=we(o),a=e==="entries"||e===Symbol.iterator&&i,g=e==="keys"&&i,p=s[e](...n),h=r?wt:t?vt:Pe;return!t&&D(o,"iterate",g?bt:ge),{next(){const{value:c,done:A}=p.next();return A?{value:c,done:A}:{value:a?[h(c[0]),h(c[1])]:h(c),done:A}},[Symbol.iterator](){return this}}}}function te(e){return function(...t){{const r=t[0]?`on key "${t[0]}" `:"";ce(`${vn(e)} operation ${r}failed: target is readonly.`,_(this))}return e==="delete"?!1:e==="clear"?void 0:this}}function Nn(){const e={get(o){return Ve(this,o)},get size(){return qe(this)},has:ze,add:ir,set:ar,delete:lr,clear:cr,forEach:Ke(!1,!1)},t={get(o){return Ve(this,o,!1,!0)},get size(){return qe(this)},has:ze,add:ir,set:ar,delete:lr,clear:cr,forEach:Ke(!1,!0)},r={get(o){return Ve(this,o,!0)},get size(){return qe(this,!0)},has(o){return ze.call(this,o,!0)},add:te("add"),set:te("set"),delete:te("delete"),clear:te("clear"),forEach:Ke(!0,!1)},n={get(o){return Ve(this,o,!0,!0)},get size(){return qe(this,!0)},has(o){return ze.call(this,o,!0)},add:te("add"),set:te("set"),delete:te("delete"),clear:te("clear"),forEach:Ke(!0,!0)};return["keys","values","entries",Symbol.iterator].forEach(o=>{e[o]=Je(o,!1,!1),r[o]=Je(o,!0,!1),t[o]=Je(o,!1,!0),n[o]=Je(o,!0,!0)}),[e,r,t,n]}const[jn,Fn,Ln,Dn]=Nn();function yt(e,t){const r=t?e?Dn:Ln:e?Fn:jn;return(n,s,o)=>s==="__v_isReactive"?!e:s==="__v_isReadonly"?e:s==="__v_raw"?n:Reflect.get(M(r,s)&&s in n?r:n,s,o)}const Bn={get:yt(!1,!1)},Un={get:yt(!0,!1)},Wn={get:yt(!0,!0)};function ur(e,t,r){const n=_(r);if(n!==r&&t.call(e,n)){const s=Ht(e);ce(`Reactive ${s} contains both the raw and reactive versions of the same object${s==="Map"?" as keys":""}, which can lead to inconsistencies. Avoid differentiating between the raw and reactive versions of an object and only use the reactive version if possible.`)}}const gr=new WeakMap,Hn=new WeakMap,fr=new WeakMap,dr=new WeakMap;function Vn(e){switch(e){case"Object":case"Array":return 1;case"Map":case"Set":case"WeakMap":case"WeakSet":return 2;default:return 0}}function zn(e){return e.__v_skip||!Object.isExtensible(e)?0:Vn(Ht(e))}function mr(e){return fe(e)?e:_t(e,!1,Mn,Bn,gr)}function pr(e){return _t(e,!0,$n,Un,fr)}function Ge(e){return _t(e,!0,kn,Wn,dr)}function _t(e,t,r,n,s){if(!K(e))return ce(`value cannot be made reactive: ${String(e)}`),e;if(e.__v_raw&&!(t&&e.__v_isReactive))return e;const o=s.get(e);if(o)return o;const i=zn(e);if(i===0)return e;const a=new Proxy(e,i===2?n:r);return s.set(e,a),a}function ye(e){return fe(e)?ye(e.__v_raw):!!(e&&e.__v_isReactive)}function fe(e){return!!(e&&e.__v_isReadonly)}function de(e){return!!(e&&e.__v_isShallow)}function _(e){const t=e&&e.__v_raw;return t?_(t):e}function qn(e){return Object.isExtensible(e)&&Sn(e,"__v_skip",!0),e}const Pe=e=>K(e)?mr(e):e,vt=e=>K(e)?pr(e):e,Kn="Computed is still dirty after getter evaluation, likely because a computed is mutating its own dependency in its getter. State mutations in computed getters should be avoided.  Check the docs for more details: https://vuejs.org/guide/essentials/computed.html#getters-should-be-side-effect-free";class Jn{constructor(t,r,n,s){this.getter=t,this._setter=r,this.dep=void 0,this.__v_isRef=!0,this.__v_isReadonly=!1,this.effect=new Jt(()=>t(this._value),()=>Ze(this,this.effect._dirtyLevel===2?2:3)),this.effect.computed=this,this.effect.active=this._cacheable=!s,this.__v_isReadonly=n}get value(){const t=_(this);return(!t._cacheable||t.effect.dirty)&&Q(t._value,t._value=t.effect.run())&&Ze(t,4),Ar(t),t.effect._dirtyLevel>=2&&(this._warnRecursive&&ce(Kn,`

getter: `,this.getter),Ze(t,2)),t._value}set value(t){this._setter(t)}get _dirty(){return this.effect.dirty}set _dirty(t){this.effect.dirty=t}}function Ar(e){var t;X&&ue&&(e=_(e),Xt(ue,(t=e.dep)!=null?t:e.dep=tr(()=>e.dep=void 0,e instanceof Jn?e:void 0),{target:e,type:"get",key:"value"}))}function Ze(e,t=4,r){e=_(e);const n=e.dep;n&&er(n,t,{target:e,type:"set",key:"value",newValue:r})}function W(e){return!!(e&&e.__v_isRef===!0)}function Gn(e){return hr(e,!1)}function Zn(e){return hr(e,!0)}function hr(e,t){return W(e)?e:new Yn(e,t)}class Yn{constructor(t,r){this.__v_isShallow=r,this.dep=void 0,this.__v_isRef=!0,this._rawValue=r?t:_(t),this._value=r?t:Pe(t)}get value(){return Ar(this),this._value}set value(t){const r=this.__v_isShallow||de(t)||fe(t);t=r?t:_(t),Q(t,this._rawValue)&&(this._rawValue=t,this._value=r?t:Pe(t),Ze(this,4,t))}}function xr(e){return W(e)?e.value:e}const Qn={get:(e,t,r)=>xr(Reflect.get(e,t,r)),set:(e,t,r,n)=>{const s=e[t];return W(s)&&!W(r)?(s.value=r,!0):Reflect.set(e,t,r,n)}};function Xn(e){return ye(e)?e:new Proxy(e,Qn)}/**
* @vue/runtime-core v3.4.21
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/const me=[];function es(e){me.push(e)}function ts(){me.pop()}function j(e,...t){dt();const r=me.length?me[me.length-1].component:null,n=r&&r.appContext.config.warnHandler,s=rs();if(n)pe(n,r,11,[e+t.map(o=>{var i,a;return(a=(i=o.toString)==null?void 0:i.call(o))!=null?a:JSON.stringify(o)}).join(""),r&&r.proxy,s.map(({vnode:o})=>`at <${jr(r,o.type)}>`).join(`
`),s]);else{const o=[`[Vue warn]: ${e}`,...t];s.length&&o.push(`
`,...ns(s)),console.warn(...o)}mt()}function rs(){let e=me[me.length-1];if(!e)return[];const t=[];for(;e;){const r=t[0];r&&r.vnode===e?r.recurseCount++:t.push({vnode:e,recurseCount:0});const n=e.component&&e.component.parent;e=n&&n.vnode}return t}function ns(e){const t=[];return e.forEach((r,n)=>{t.push(...n===0?[]:[`
`],...ss(r))}),t}function ss({vnode:e,recurseCount:t}){const r=t>0?`... (${t} recursive calls)`:"",n=e.component?e.component.parent==null:!1,s=` at <${jr(e.component,e.type,n)}`,o=">"+r;return e.props?[s,...os(e.props),o]:[s+o]}function os(e){const t=[],r=Object.keys(e);return r.slice(0,3).forEach(n=>{t.push(...br(n,e[n]))}),r.length>3&&t.push(" ..."),t}function br(e,t,r){return ut(t)?(t=JSON.stringify(t),r?t:[`${e}=${t}`]):typeof t=="number"||typeof t=="boolean"||t==null?r?t:[`${e}=${t}`]:W(t)?(t=br(e,_(t.value),!0),r?t:[`${e}=Ref<`,t,">"]):N(t)?[`${e}=fn${t.name?`<${t.name}>`:""}`]:(t=_(t),r?t:[`${e}=`,t])}const wr={sp:"serverPrefetch hook",bc:"beforeCreate hook",c:"created hook",bm:"beforeMount hook",m:"mounted hook",bu:"beforeUpdate hook",u:"updated",bum:"beforeUnmount hook",um:"unmounted hook",a:"activated hook",da:"deactivated hook",ec:"errorCaptured hook",rtc:"renderTracked hook",rtg:"renderTriggered hook",0:"setup function",1:"render function",2:"watcher getter",3:"watcher callback",4:"watcher cleanup function",5:"native event handler",6:"component event handler",7:"vnode hook",8:"directive hook",9:"transition hook",10:"app errorHandler",11:"app warnHandler",12:"ref function",13:"async component loader",14:"scheduler flush. This is likely a Vue internals bug. Please open an issue at https://github.com/vuejs/core ."};function pe(e,t,r,n){try{return n?e(...n):e()}catch(s){St(s,t,r)}}function Ye(e,t,r,n){if(N(e)){const o=pe(e,t,r,n);return o&&wn(o)&&o.catch(i=>{St(i,t,r)}),o}const s=[];for(let o=0;o<e.length;o++)s.push(Ye(e[o],t,r,n));return s}function St(e,t,r,n=!0){const s=t?t.vnode:null;if(t){let o=t.parent;const i=t.proxy,a=wr[r];for(;o;){const p=o.ec;if(p){for(let h=0;h<p.length;h++)if(p[h](e,i,a)===!1)return}o=o.parent}const g=t.appContext.config.errorHandler;if(g){pe(g,null,10,[e,i,a]);return}}is(e,r,s,n)}function is(e,t,r,n=!0){{const s=wr[t];if(r&&es(r),j(`Unhandled error${s?` during execution of ${s}`:""}`),r&&ts(),n)throw e;console.error(e)}}let Qe=!1,Et=!1;const z=[];let re=0;const _e=[];let Z=null,ne=0;const yr=Promise.resolve();let Ct=null;const as=100;function ls(e){const t=Ct||yr;return e?t.then(this?e.bind(this):e):t}function cs(e){let t=re+1,r=z.length;for(;t<r;){const n=t+r>>>1,s=z[n],o=Te(s);o<e||o===e&&s.pre?t=n+1:r=n}return t}function Pt(e){(!z.length||!z.includes(e,Qe&&e.allowRecurse?re+1:re))&&(e.id==null?z.push(e):z.splice(cs(e.id),0,e),_r())}function _r(){!Qe&&!Et&&(Et=!0,Ct=yr.then(Sr))}function vr(e){k(e)?_e.push(...e):(!Z||!Z.includes(e,e.allowRecurse?ne+1:ne))&&_e.push(e),_r()}function us(e){if(_e.length){const t=[...new Set(_e)].sort((r,n)=>Te(r)-Te(n));if(_e.length=0,Z){Z.push(...t);return}for(Z=t,e=e||new Map,ne=0;ne<Z.length;ne++)Er(e,Z[ne])||Z[ne]();Z=null,ne=0}}const Te=e=>e.id==null?1/0:e.id,gs=(e,t)=>{const r=Te(e)-Te(t);if(r===0){if(e.pre&&!t.pre)return-1;if(t.pre&&!e.pre)return 1}return r};function Sr(e){Et=!1,Qe=!0,e=e||new Map,z.sort(gs);const t=r=>Er(e,r);try{for(re=0;re<z.length;re++){const r=z[re];if(r&&r.active!==!1){if(t(r))continue;pe(r,null,14)}}}finally{re=0,z.length=0,us(e),Qe=!1,Ct=null,(z.length||_e.length)&&Sr(e)}}function Er(e,t){if(!e.has(t))e.set(t,1);else{const r=e.get(t);if(r>as){const n=t.ownerInstance,s=n&&Nr(n.type);return St(`Maximum recursive updates exceeded${s?` in component <${s}>`:""}. This means you have a reactive effect that is mutating its own dependencies and thus recursively triggering itself. Possible sources include component template, render function, updated hook or watcher source function.`,null,10),!0}else e.set(t,r+1)}}const Ie=new Set;zt().__VUE_HMR_RUNTIME__={createRecord:Tt(fs),rerender:Tt(ds),reload:Tt(ms)};const Xe=new Map;function fs(e,t){return Xe.has(e)?!1:(Xe.set(e,{initialDef:Re(t),instances:new Set}),!0)}function Re(e){return $s(e)?e.__vccOpts:e}function ds(e,t){const r=Xe.get(e);r&&(r.initialDef.render=t,[...r.instances].forEach(n=>{t&&(n.render=t,Re(n.type).render=t),n.renderCache=[],n.effect.dirty=!0,n.update()}))}function ms(e,t){const r=Xe.get(e);if(!r)return;t=Re(t),Cr(r.initialDef,t);const n=[...r.instances];for(const s of n){const o=Re(s.type);Ie.has(o)||(o!==r.initialDef&&Cr(o,t),Ie.add(o)),s.appContext.propsCache.delete(s.type),s.appContext.emitsCache.delete(s.type),s.appContext.optionsCache.delete(s.type),s.ceReload?(Ie.add(o),s.ceReload(t.styles),Ie.delete(o)):s.parent?(s.parent.effect.dirty=!0,Pt(s.parent.update)):s.appContext.reload?s.appContext.reload():typeof window<"u"?window.location.reload():console.warn("[HMR] Root or manually mounted instance modified. Full reload required.")}vr(()=>{for(const s of n)Ie.delete(Re(s.type))})}function Cr(e,t){G(e,t);for(const r in e)r!=="__file"&&!(r in t)&&delete e[r]}function Tt(e){return(t,r)=>{try{return e(t,r)}catch(n){console.error(n),console.warn("[HMR] Something went wrong during Vue component hot-reload. Full reload required.")}}}let ps=null;function As(e,t){t&&t.pendingBranch?k(e)?t.effects.push(...e):t.effects.push(e):vr(e)}const hs=Symbol.for("v-scx"),xs=()=>{{const e=Ps(hs);return e||j("Server rendering context not provided. Make sure to only call useSSRContext() conditionally in the server build."),e}},et={};function bs(e,t,r){return N(t)||j("`watch(fn, options?)` signature has been moved to a separate API. Use `watchEffect(fn, options?)` instead. `watch` now only supports `watch(source, cb, options?) signature."),Pr(e,t,r)}function Pr(e,t,{immediate:r,deep:n,flush:s,once:o,onTrack:i,onTrigger:a}=J){if(t&&o){const w=t;t=(...l)=>{w(...l),Ae()}}n!==void 0&&typeof n=="number"&&j('watch() "deep" option with number value will be used as watch depth in future versions. Please use a boolean instead to avoid potential breakage.'),t||(r!==void 0&&j('watch() "immediate" option is only respected when using the watch(source, callback, options?) signature.'),n!==void 0&&j('watch() "deep" option is only respected when using the watch(source, callback, options?) signature.'),o!==void 0&&j('watch() "once" option is only respected when using the watch(source, callback, options?) signature.'));const g=w=>{j("Invalid watch source: ",w,"A watch source can only be a getter/effect function, a ref, a reactive object, or an array of these types.")},p=rt,h=w=>n===!0?w:ve(w,n===!1?1:void 0);let c,A=!1,x=!1;if(W(e)?(c=()=>e.value,A=de(e)):ye(e)?(c=()=>h(e),A=!0):k(e)?(x=!0,A=e.some(w=>ye(w)||de(w)),c=()=>e.map(w=>{if(W(w))return w.value;if(ye(w))return h(w);if(N(w))return pe(w,p,2);g(w)})):N(e)?t?c=()=>pe(e,p,2):c=()=>(b&&b(),Ye(e,p,3,[E])):(c=Be,g(e)),t&&n){const w=c;c=()=>ve(w())}let b,E=w=>{b=$.onStop=()=>{pe(w,p,4),b=$.onStop=void 0}},S;if(kr)if(E=Be,t?r&&Ye(t,p,3,[c(),x?[]:void 0,E]):c(),s==="sync"){const w=xs();S=w.__watcherHandles||(w.__watcherHandles=[])}else return Be;let I=x?new Array(e.length).fill(et):et;const R=()=>{if(!(!$.active||!$.dirty))if(t){const w=$.run();(n||A||(x?w.some((l,u)=>Q(l,I[u])):Q(w,I)))&&(b&&b(),Ye(t,p,3,[w,I===et?void 0:x&&I[0]===et?[]:I,E]),I=w)}else $.run()};R.allowRecurse=!!t;let L;s==="sync"?L=R:s==="post"?L=()=>$r(R,p&&p.suspense):(R.pre=!0,p&&(R.id=p.uid),L=()=>Pt(R));const $=new Jt(c,Be,L),oe=Kt(),Ae=()=>{$.stop(),oe&&hn(oe.effects,$)};return $.onTrack=i,$.onTrigger=a,t?r?R():I=$.run():s==="post"?$r($.run.bind($),p&&p.suspense):$.run(),S&&S.push(Ae),Ae}function ws(e,t,r){const n=this.proxy,s=ut(e)?e.includes(".")?ys(n,e):()=>n[e]:e.bind(n,n);let o;N(t)?o=t:(o=t.handler,r=t);const i=Ts(this),a=Pr(s,o.bind(n),r);return i(),a}function ys(e,t){const r=t.split(".");return()=>{let n=e;for(let s=0;s<r.length&&n;s++)n=n[r[s]];return n}}function ve(e,t,r=0,n){if(!K(e)||e.__v_skip)return e;if(t&&t>0){if(r>=t)return e;r++}if(n=n||new Set,n.has(e))return e;if(n.add(e),W(e))ve(e.value,t,r,n);else if(k(e))for(let s=0;s<e.length;s++)ve(e[s],t,r,n);else if(bn(e)||we(e))e.forEach(s=>{ve(s,t,r,n)});else if(_n(e))for(const s in e)ve(e[s],t,r,n);return e}const It=e=>e?Is(e)?Rs(e)||e.proxy:It(e.parent):null,Oe=G(Object.create(null),{$:e=>e,$el:e=>e.vnode.el,$data:e=>e.data,$props:e=>Ge(e.props),$attrs:e=>Ge(e.attrs),$slots:e=>Ge(e.slots),$refs:e=>Ge(e.refs),$parent:e=>It(e.parent),$root:e=>It(e.root),$emit:e=>e.emit,$options:e=>vs(e),$forceUpdate:e=>e.f||(e.f=()=>{e.effect.dirty=!0,Pt(e.update)}),$nextTick:e=>e.n||(e.n=ls.bind(e.proxy)),$watch:e=>ws.bind(e)}),Rt=(e,t)=>e!==J&&!e.__isScriptSetup&&M(e,t),_s={get({_:e},t){const{ctx:r,setupState:n,data:s,props:o,accessCache:i,type:a,appContext:g}=e;if(t==="__isVue")return!0;let p;if(t[0]!=="$"){const x=i[t];if(x!==void 0)switch(x){case 1:return n[t];case 2:return s[t];case 4:return r[t];case 3:return o[t]}else{if(Rt(n,t))return i[t]=1,n[t];if(s!==J&&M(s,t))return i[t]=2,s[t];if((p=e.propsOptions[0])&&M(p,t))return i[t]=3,o[t];if(r!==J&&M(r,t))return i[t]=4,r[t];i[t]=0}}const h=Oe[t];let c,A;if(h)return(t==="$attrs"||t==="$slots")&&D(e,"get",t),h(e);if((c=a.__cssModules)&&(c=c[t]))return c;if(r!==J&&M(r,t))return i[t]=4,r[t];if(A=g.config.globalProperties,M(A,t))return A[t]},set({_:e},t,r){const{data:n,setupState:s,ctx:o}=e;return Rt(s,t)?(s[t]=r,!0):s.__isScriptSetup&&M(s,t)?(j(`Cannot mutate <script setup> binding "${t}" from Options API.`),!1):n!==J&&M(n,t)?(n[t]=r,!0):M(e.props,t)?(j(`Attempting to mutate prop "${t}". Props are readonly.`),!1):t[0]==="$"&&t.slice(1)in e?(j(`Attempting to mutate public property "${t}". Properties starting with $ are reserved and readonly.`),!1):(t in e.appContext.config.globalProperties?Object.defineProperty(o,t,{enumerable:!0,configurable:!0,value:r}):o[t]=r,!0)},has({_:{data:e,setupState:t,accessCache:r,ctx:n,appContext:s,propsOptions:o}},i){let a;return!!r[i]||e!==J&&M(e,i)||Rt(t,i)||(a=o[0])&&M(a,i)||M(n,i)||M(Oe,i)||M(s.config.globalProperties,i)},defineProperty(e,t,r){return r.get!=null?e._.accessCache[t]=0:M(r,"value")&&this.set(e,t,r.value,null),Reflect.defineProperty(e,t,r)}};_s.ownKeys=e=>(j("Avoid app logic that relies on enumerating keys on a component instance. The keys will be empty in production mode to avoid performance overhead."),Reflect.ownKeys(e));function Tr(e){return k(e)?e.reduce((t,r)=>(t[r]=null,t),{}):e}function vs(e){const t=e.type,{mixins:r,extends:n}=t,{mixins:s,optionsCache:o,config:{optionMergeStrategies:i}}=e.appContext,a=o.get(t);let g;return a?g=a:!s.length&&!r&&!n?g=t:(g={},s.length&&s.forEach(p=>tt(g,p,i,!0)),tt(g,t,i)),K(t)&&o.set(t,g),g}function tt(e,t,r,n=!1){const{mixins:s,extends:o}=t;o&&tt(e,o,r,!0),s&&s.forEach(i=>tt(e,i,r,!0));for(const i in t)if(n&&i==="expose")j('"expose" option is ignored when declared in mixins or extends. It should only be declared in the base component itself.');else{const a=Ss[i]||r&&r[i];e[i]=a?a(e[i],t[i]):t[i]}return e}const Ss={data:Ir,props:Or,emits:Or,methods:Me,computed:Me,beforeCreate:F,created:F,beforeMount:F,mounted:F,beforeUpdate:F,updated:F,beforeDestroy:F,beforeUnmount:F,destroyed:F,unmounted:F,activated:F,deactivated:F,errorCaptured:F,serverPrefetch:F,components:Me,directives:Me,watch:Cs,provide:Ir,inject:Es};function Ir(e,t){return t?e?function(){return G(N(e)?e.call(this,this):e,N(t)?t.call(this,this):t)}:t:e}function Es(e,t){return Me(Rr(e),Rr(t))}function Rr(e){if(k(e)){const t={};for(let r=0;r<e.length;r++)t[e[r]]=e[r];return t}return e}function F(e,t){return e?[...new Set([].concat(e,t))]:t}function Me(e,t){return e?G(Object.create(null),e,t):t}function Or(e,t){return e?k(e)&&k(t)?[...new Set([...e,...t])]:G(Object.create(null),Tr(e),Tr(t??{})):t}function Cs(e,t){if(!e)return t;if(!t)return e;const r=G(Object.create(null),e);for(const n in t)r[n]=F(e[n],t[n]);return r}let Mr=null;function Ps(e,t,r=!1){const n=rt||ps;if(n||Mr){const s=n?n.parent==null?n.vnode.appContext&&n.vnode.appContext.provides:n.parent.provides:Mr._context.provides;if(s&&e in s)return s[e];if(arguments.length>1)return r&&N(t)?t.call(n&&n.proxy):t;j(`injection "${String(e)}" not found.`)}else j("inject() can only be used inside setup() or functional components.")}const $r=As;let rt=null,Ot;{const e=zt(),t=(r,n)=>{let s;return(s=e[r])||(s=e[r]=[]),s.push(n),o=>{s.length>1?s.forEach(i=>i(o)):s[0](o)}};Ot=t("__VUE_INSTANCE_SETTERS__",r=>rt=r),t("__VUE_SSR_SETTERS__",r=>kr=r)}const Ts=e=>{const t=rt;return Ot(e),e.scope.on(),()=>{e.scope.off(),Ot(t)}};function Is(e){return e.vnode.shapeFlag&4}let kr=!1;function Rs(e){if(e.exposed)return e.exposeProxy||(e.exposeProxy=new Proxy(Xn(qn(e.exposed)),{get(t,r){if(r in t)return t[r];if(r in Oe)return Oe[r](e)},has(t,r){return r in t||r in Oe}}))}const Os=/(?:^|[-_])(\w)/g,Ms=e=>e.replace(Os,t=>t.toUpperCase()).replace(/[-_]/g,"");function Nr(e,t=!0){return N(e)?e.displayName||e.name:e.name||t&&e.__name}function jr(e,t,r=!1){let n=Nr(t);if(!n&&t.__file){const s=t.__file.match(/([^/\\]+)\.\w+$/);s&&(n=s[1])}if(!n&&e&&e.parent){const s=o=>{for(const i in o)if(o[i]===t)return i};n=s(e.components||e.parent.type.components)||s(e.appContext.components)}return n?Ms(n):r?"App":"Anonymous"}function $s(e){return N(e)&&"__vccOpts"in e}function ks(){if(typeof window>"u")return;const e={style:"color:#3ba776"},t={style:"color:#1677ff"},r={style:"color:#f5222d"},n={style:"color:#eb2f96"},s={header(c){return K(c)?c.__isVue?["div",e,"VueInstance"]:W(c)?["div",{},["span",e,h(c)],"<",a(c.value),">"]:ye(c)?["div",{},["span",e,de(c)?"ShallowReactive":"Reactive"],"<",a(c),`>${fe(c)?" (readonly)":""}`]:fe(c)?["div",{},["span",e,de(c)?"ShallowReadonly":"Readonly"],"<",a(c),">"]:null:null},hasBody(c){return c&&c.__isVue},body(c){if(c&&c.__isVue)return["div",{},...o(c.$)]}};function o(c){const A=[];c.type.props&&c.props&&A.push(i("props",_(c.props))),c.setupState!==J&&A.push(i("setup",c.setupState)),c.data!==J&&A.push(i("data",_(c.data)));const x=g(c,"computed");x&&A.push(i("computed",x));const b=g(c,"inject");return b&&A.push(i("injected",b)),A.push(["div",{},["span",{style:n.style+";opacity:0.66"},"$ (internal): "],["object",{object:c}]]),A}function i(c,A){return A=G({},A),Object.keys(A).length?["div",{style:"line-height:1.25em;margin-bottom:0.6em"},["div",{style:"color:#476582"},c],["div",{style:"padding-left:1.25em"},...Object.keys(A).map(x=>["div",{},["span",n,x+": "],a(A[x],!1)])]]:["span",{}]}function a(c,A=!0){return typeof c=="number"?["span",t,c]:typeof c=="string"?["span",r,JSON.stringify(c)]:typeof c=="boolean"?["span",n,c]:K(c)?["object",{object:A?_(c):c}]:["span",r,String(c)]}function g(c,A){const x=c.type;if(N(x))return;const b={};for(const E in c.ctx)p(x,E,A)&&(b[E]=c.ctx[E]);return b}function p(c,A,x){const b=c[x];if(k(b)&&b.includes(A)||K(b)&&A in b||c.extends&&p(c.extends,A,x)||c.mixins&&c.mixins.some(E=>p(E,A,x)))return!0}function h(c){return de(c)?"ShallowRef":c.effect?"ComputedRef":"Ref"}window.devtoolsFormatters?window.devtoolsFormatters.push(s):window.devtoolsFormatters=[s]}/**
* vue v3.4.21
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/function Ns(){ks()}Ns();function js(e){return Kt()?(Cn(),!0):!1}function Fs(e){return typeof e=="function"?e():xr(e)}typeof WorkerGlobalScope<"u"&&globalThis instanceof WorkerGlobalScope;function Ls(e,t){function r(...n){return new Promise((s,o)=>{Promise.resolve(e(()=>t.apply(this,n),{fn:t,thisArg:this,args:n})).then(s).catch(o)})}return r}const Ds=e=>e();function Bs(e,t,r={}){const{eventFilter:n=Ds,...s}=r;return bs(e,Ls(n,t),s)}const Us={boolean:{read:e=>e==="true",write:e=>String(e)},object:{read:e=>JSON.parse(e),write:e=>JSON.stringify(e)},number:{read:e=>Number.parseFloat(e),write:e=>String(e)},any:{read:e=>e,write:e=>String(e)},string:{read:e=>e,write:e=>String(e)},map:{read:e=>new Map(JSON.parse(e)),write:e=>JSON.stringify(Array.from(e.entries()))},set:{read:e=>new Set(JSON.parse(e)),write:e=>JSON.stringify(Array.from(e))},date:{read:e=>new Date(e),write:e=>e.toISOString()}};var Fr={exports:{}};(function(e,t){(function(r,n){n(e)})(typeof globalThis<"u"?globalThis:typeof self<"u"?self:$t,function(r){var n,s;if(!((s=(n=globalThis.chrome)==null?void 0:n.runtime)!=null&&s.id))throw new Error("This script should only be loaded in a browser extension.");if(typeof globalThis.browser>"u"||Object.getPrototypeOf(globalThis.browser)!==Object.prototype){const o="The message port closed before a response was received.",i=a=>{const g={alarms:{clear:{minArgs:0,maxArgs:1},clearAll:{minArgs:0,maxArgs:0},get:{minArgs:0,maxArgs:1},getAll:{minArgs:0,maxArgs:0}},bookmarks:{create:{minArgs:1,maxArgs:1},get:{minArgs:1,maxArgs:1},getChildren:{minArgs:1,maxArgs:1},getRecent:{minArgs:1,maxArgs:1},getSubTree:{minArgs:1,maxArgs:1},getTree:{minArgs:0,maxArgs:0},move:{minArgs:2,maxArgs:2},remove:{minArgs:1,maxArgs:1},removeTree:{minArgs:1,maxArgs:1},search:{minArgs:1,maxArgs:1},update:{minArgs:2,maxArgs:2}},browserAction:{disable:{minArgs:0,maxArgs:1,fallbackToNoCallback:!0},enable:{minArgs:0,maxArgs:1,fallbackToNoCallback:!0},getBadgeBackgroundColor:{minArgs:1,maxArgs:1},getBadgeText:{minArgs:1,maxArgs:1},getPopup:{minArgs:1,maxArgs:1},getTitle:{minArgs:1,maxArgs:1},openPopup:{minArgs:0,maxArgs:0},setBadgeBackgroundColor:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setBadgeText:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setIcon:{minArgs:1,maxArgs:1},setPopup:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setTitle:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0}},browsingData:{remove:{minArgs:2,maxArgs:2},removeCache:{minArgs:1,maxArgs:1},removeCookies:{minArgs:1,maxArgs:1},removeDownloads:{minArgs:1,maxArgs:1},removeFormData:{minArgs:1,maxArgs:1},removeHistory:{minArgs:1,maxArgs:1},removeLocalStorage:{minArgs:1,maxArgs:1},removePasswords:{minArgs:1,maxArgs:1},removePluginData:{minArgs:1,maxArgs:1},settings:{minArgs:0,maxArgs:0}},commands:{getAll:{minArgs:0,maxArgs:0}},contextMenus:{remove:{minArgs:1,maxArgs:1},removeAll:{minArgs:0,maxArgs:0},update:{minArgs:2,maxArgs:2}},cookies:{get:{minArgs:1,maxArgs:1},getAll:{minArgs:1,maxArgs:1},getAllCookieStores:{minArgs:0,maxArgs:0},remove:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}},devtools:{inspectedWindow:{eval:{minArgs:1,maxArgs:2,singleCallbackArg:!1}},panels:{create:{minArgs:3,maxArgs:3,singleCallbackArg:!0},elements:{createSidebarPane:{minArgs:1,maxArgs:1}}}},downloads:{cancel:{minArgs:1,maxArgs:1},download:{minArgs:1,maxArgs:1},erase:{minArgs:1,maxArgs:1},getFileIcon:{minArgs:1,maxArgs:2},open:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},pause:{minArgs:1,maxArgs:1},removeFile:{minArgs:1,maxArgs:1},resume:{minArgs:1,maxArgs:1},search:{minArgs:1,maxArgs:1},show:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0}},extension:{isAllowedFileSchemeAccess:{minArgs:0,maxArgs:0},isAllowedIncognitoAccess:{minArgs:0,maxArgs:0}},history:{addUrl:{minArgs:1,maxArgs:1},deleteAll:{minArgs:0,maxArgs:0},deleteRange:{minArgs:1,maxArgs:1},deleteUrl:{minArgs:1,maxArgs:1},getVisits:{minArgs:1,maxArgs:1},search:{minArgs:1,maxArgs:1}},i18n:{detectLanguage:{minArgs:1,maxArgs:1},getAcceptLanguages:{minArgs:0,maxArgs:0}},identity:{launchWebAuthFlow:{minArgs:1,maxArgs:1}},idle:{queryState:{minArgs:1,maxArgs:1}},management:{get:{minArgs:1,maxArgs:1},getAll:{minArgs:0,maxArgs:0},getSelf:{minArgs:0,maxArgs:0},setEnabled:{minArgs:2,maxArgs:2},uninstallSelf:{minArgs:0,maxArgs:1}},notifications:{clear:{minArgs:1,maxArgs:1},create:{minArgs:1,maxArgs:2},getAll:{minArgs:0,maxArgs:0},getPermissionLevel:{minArgs:0,maxArgs:0},update:{minArgs:2,maxArgs:2}},pageAction:{getPopup:{minArgs:1,maxArgs:1},getTitle:{minArgs:1,maxArgs:1},hide:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setIcon:{minArgs:1,maxArgs:1},setPopup:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setTitle:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},show:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0}},permissions:{contains:{minArgs:1,maxArgs:1},getAll:{minArgs:0,maxArgs:0},remove:{minArgs:1,maxArgs:1},request:{minArgs:1,maxArgs:1}},runtime:{getBackgroundPage:{minArgs:0,maxArgs:0},getPlatformInfo:{minArgs:0,maxArgs:0},openOptionsPage:{minArgs:0,maxArgs:0},requestUpdateCheck:{minArgs:0,maxArgs:0},sendMessage:{minArgs:1,maxArgs:3},sendNativeMessage:{minArgs:2,maxArgs:2},setUninstallURL:{minArgs:1,maxArgs:1}},sessions:{getDevices:{minArgs:0,maxArgs:1},getRecentlyClosed:{minArgs:0,maxArgs:1},restore:{minArgs:0,maxArgs:1}},storage:{local:{clear:{minArgs:0,maxArgs:0},get:{minArgs:0,maxArgs:1},getBytesInUse:{minArgs:0,maxArgs:1},remove:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}},managed:{get:{minArgs:0,maxArgs:1},getBytesInUse:{minArgs:0,maxArgs:1}},sync:{clear:{minArgs:0,maxArgs:0},get:{minArgs:0,maxArgs:1},getBytesInUse:{minArgs:0,maxArgs:1},remove:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}}},tabs:{captureVisibleTab:{minArgs:0,maxArgs:2},create:{minArgs:1,maxArgs:1},detectLanguage:{minArgs:0,maxArgs:1},discard:{minArgs:0,maxArgs:1},duplicate:{minArgs:1,maxArgs:1},executeScript:{minArgs:1,maxArgs:2},get:{minArgs:1,maxArgs:1},getCurrent:{minArgs:0,maxArgs:0},getZoom:{minArgs:0,maxArgs:1},getZoomSettings:{minArgs:0,maxArgs:1},goBack:{minArgs:0,maxArgs:1},goForward:{minArgs:0,maxArgs:1},highlight:{minArgs:1,maxArgs:1},insertCSS:{minArgs:1,maxArgs:2},move:{minArgs:2,maxArgs:2},query:{minArgs:1,maxArgs:1},reload:{minArgs:0,maxArgs:2},remove:{minArgs:1,maxArgs:1},removeCSS:{minArgs:1,maxArgs:2},sendMessage:{minArgs:2,maxArgs:3},setZoom:{minArgs:1,maxArgs:2},setZoomSettings:{minArgs:1,maxArgs:2},update:{minArgs:1,maxArgs:2}},topSites:{get:{minArgs:0,maxArgs:0}},webNavigation:{getAllFrames:{minArgs:1,maxArgs:1},getFrame:{minArgs:1,maxArgs:1}},webRequest:{handlerBehaviorChanged:{minArgs:0,maxArgs:0}},windows:{create:{minArgs:0,maxArgs:1},get:{minArgs:1,maxArgs:2},getAll:{minArgs:0,maxArgs:1},getCurrent:{minArgs:0,maxArgs:1},getLastFocused:{minArgs:0,maxArgs:1},remove:{minArgs:1,maxArgs:1},update:{minArgs:2,maxArgs:2}}};if(Object.keys(g).length===0)throw new Error("api-metadata.json has not been included in browser-polyfill");class p extends WeakMap{constructor(u,d=void 0){super(d),this.createItem=u}get(u){return this.has(u)||this.set(u,this.createItem(u)),super.get(u)}}const h=l=>l&&typeof l=="object"&&typeof l.then=="function",c=(l,u)=>(...d)=>{a.runtime.lastError?l.reject(new Error(a.runtime.lastError.message)):u.singleCallbackArg||d.length<=1&&u.singleCallbackArg!==!1?l.resolve(d[0]):l.resolve(d)},A=l=>l==1?"argument":"arguments",x=(l,u)=>function(m,...v){if(v.length<u.minArgs)throw new Error(`Expected at least ${u.minArgs} ${A(u.minArgs)} for ${l}(), got ${v.length}`);if(v.length>u.maxArgs)throw new Error(`Expected at most ${u.maxArgs} ${A(u.maxArgs)} for ${l}(), got ${v.length}`);return new Promise((C,P)=>{if(u.fallbackToNoCallback)try{m[l](...v,c({resolve:C,reject:P},u))}catch(f){console.warn(`${l} API method doesn't seem to support the callback parameter, falling back to call it without a callback: `,f),m[l](...v),u.fallbackToNoCallback=!1,u.noCallback=!0,C()}else u.noCallback?(m[l](...v),C()):m[l](...v,c({resolve:C,reject:P},u))})},b=(l,u,d)=>new Proxy(u,{apply(m,v,C){return d.call(v,l,...C)}});let E=Function.call.bind(Object.prototype.hasOwnProperty);const S=(l,u={},d={})=>{let m=Object.create(null),v={has(P,f){return f in l||f in m},get(P,f,T){if(f in m)return m[f];if(!(f in l))return;let y=l[f];if(typeof y=="function")if(typeof u[f]=="function")y=b(l,l[f],u[f]);else if(E(d,f)){let U=x(f,d[f]);y=b(l,l[f],U)}else y=y.bind(l);else if(typeof y=="object"&&y!==null&&(E(u,f)||E(d,f)))y=S(y,u[f],d[f]);else if(E(d,"*"))y=S(y,u[f],d["*"]);else return Object.defineProperty(m,f,{configurable:!0,enumerable:!0,get(){return l[f]},set(U){l[f]=U}}),y;return m[f]=y,y},set(P,f,T,y){return f in m?m[f]=T:l[f]=T,!0},defineProperty(P,f,T){return Reflect.defineProperty(m,f,T)},deleteProperty(P,f){return Reflect.deleteProperty(m,f)}},C=Object.create(l);return new Proxy(C,v)},I=l=>({addListener(u,d,...m){u.addListener(l.get(d),...m)},hasListener(u,d){return u.hasListener(l.get(d))},removeListener(u,d){u.removeListener(l.get(d))}}),R=new p(l=>typeof l!="function"?l:function(d){const m=S(d,{},{getContent:{minArgs:0,maxArgs:0}});l(m)}),L=new p(l=>typeof l!="function"?l:function(d,m,v){let C=!1,P,f=new Promise(q=>{P=function(O){C=!0,q(O)}}),T;try{T=l(d,m,P)}catch(q){T=Promise.reject(q)}const y=T!==!0&&h(T);if(T!==!0&&!y&&!C)return!1;const U=q=>{q.then(O=>{v(O)},O=>{let he;O&&(O instanceof Error||typeof O.message=="string")?he=O.message:he="An unexpected error occurred",v({__mozWebExtensionPolyfillReject__:!0,message:he})}).catch(O=>{console.error("Failed to send onMessage rejected reply",O)})};return U(y?T:f),!0}),$=({reject:l,resolve:u},d)=>{a.runtime.lastError?a.runtime.lastError.message===o?u():l(new Error(a.runtime.lastError.message)):d&&d.__mozWebExtensionPolyfillReject__?l(new Error(d.message)):u(d)},oe=(l,u,d,...m)=>{if(m.length<u.minArgs)throw new Error(`Expected at least ${u.minArgs} ${A(u.minArgs)} for ${l}(), got ${m.length}`);if(m.length>u.maxArgs)throw new Error(`Expected at most ${u.maxArgs} ${A(u.maxArgs)} for ${l}(), got ${m.length}`);return new Promise((v,C)=>{const P=$.bind(null,{resolve:v,reject:C});m.push(P),d.sendMessage(...m)})},Ae={devtools:{network:{onRequestFinished:I(R)}},runtime:{onMessage:I(L),onMessageExternal:I(L),sendMessage:oe.bind(null,"sendMessage",{minArgs:1,maxArgs:3})},tabs:{sendMessage:oe.bind(null,"sendMessage",{minArgs:2,maxArgs:3})}},w={clear:{minArgs:1,maxArgs:1},get:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}};return g.privacy={network:{"*":w},services:{"*":w},websites:{"*":w}},S(a,Ae,g)};r.exports=i(chrome)}else r.exports=globalThis.browser})})(Fr);var $e=Fr.exports;const H=ot($e);function Ws(e){return e==null?"any":e instanceof Set?"set":e instanceof Map?"map":e instanceof Date?"date":typeof e=="boolean"?"boolean":typeof e=="string"?"string":typeof e=="object"?"object":Number.isNaN(e)?"any":"number"}const nt={removeItem(e){return $e.storage.local.remove(e)},setItem(e,t){return $e.storage.local.set({[e]:t})},async getItem(e){return(await $e.storage.local.get(e))[e]}};function Lr(e,t,r={}){const{flush:n="pre",deep:s=!0,listenToStorageChanges:o=!0,writeDefaults:i=!0,mergeDefaults:a=!1,shallow:g,eventFilter:p,onError:h=S=>{console.error(S)}}=r,c=Fs(t),A=Ws(c),x=(g?Zn:Gn)(t),b=r.serializer??Us[A];async function E(S){if(!(S&&S.key!==e))try{const I=S?S.newValue:await nt.getItem(e);if(I==null)x.value=c,i&&c!==null&&await nt.setItem(e,await b.write(c));else if(a){const R=await b.read(I);typeof a=="function"?x.value=a(R,c):A==="object"&&!Array.isArray(R)?x.value={...c,...R}:x.value=R}else x.value=await b.read(I)}catch(I){h(I)}}if(E(),o){const S=async I=>{for(const[R,L]of Object.entries(I))await E({key:R,newValue:L.newValue})};$e.storage.onChanged.addListener(S),js()}return Bs(x,async()=>{try{await(x.value==null?nt.removeItem(e):nt.setItem(e,await b.write(x.value)))}catch(S){h(S)}},{flush:n,deep:s,eventFilter:p}),x}const Hs=["chrome-extension://","chrome-search://","chrome://","devtools://","edge://","https://chrome.google.com/webstore"];function Vs(e){return Hs.some(t=>e.startsWith(t))}const zs=navigator.userAgent.includes("Firefox"),V={activePort:null,originalHost:null,lastURL:""},ke=Lr("recStatus",ae.Off),se=Lr("codeBlocks",[]),st=e=>{V.activePort&&(!e||e.frameId===0)&&V.activePort.disconnect()},Dr=e=>{const t=e.frameId===0,r=!e.url.includes(V.originalHost??""),n=e.transitionQualifiers.includes("forward_back"),s=e.transitionQualifiers.includes("from_address_bar");if(t&&(r||n||s)){Br();return}if(e.url.includes(V.originalHost??"")){const o=dn(e.url);se.value.push({code:o,prompt:"prompt-----url"})}},Mt=e=>{!e||e.frameId!==0||Vs(e.url)||H.tabs.executeScript(e.tabId,{file:`${zs?"":"."}/dist/contentScripts/index.global.js`,runAt:"document_end"}).catch(t=>console.error("[cypress-recorder][background]注入脚本报错：",t))},qs=async()=>{Mt(),ke.value=ae.On,await Promise.resolve(),H.action.setBadgeText({text:"rec"})},Br=async()=>{st(),H.webNavigation.onDOMContentLoaded.removeListener(Mt),H.webNavigation.onCommitted.removeListener(Dr),H.webNavigation.onBeforeNavigate.removeListener(st),ke.value=ae.Paused,await Promise.resolve(),V.activePort=null,V.originalHost=null,H.action.setBadgeText({text:"pause"})},Ks=async()=>{V.lastURL="",ke.value=ae.Off,se.value=[],await Promise.resolve(),H.action.setBadgeText({text:""})};(()=>{st(),ke.value=ae.Off,se.value=[]})(),H.runtime.onInstalled.addListener(()=>console.log("[cypress-recorder][background]扩展已安装")),H.runtime.onConnect.addListener(e=>{if(V.activePort=e,ke.value===ae.On&&(V.originalHost=e.name,H.webNavigation.onBeforeNavigate.addListener(st),H.webNavigation.onCommitted.addListener(Dr),H.webNavigation.onDOMContentLoaded.addListener(Mt,{url:[{hostEquals:V.originalHost}]}),e.sender&&e.sender.url&&V.lastURL!==e.sender.url)){const t=mn(e.sender.url);V.lastURL=e.sender.url,se.value.push({code:t,prompt:"prompt-----visit"})}}),Wt("content-event-message",async e=>{console.log("[cypress-recorder][background]接受来自content的event消息: ",e);const t=e.data.event,r=await pn(t);r&&(t.action===le.DblClick?(se.value.splice(se.value.length-2,2),await Promise.resolve(),se.value.push({code:r,prompt:"prompt-----双击"})):se.value.push({code:r,prompt:"prompt-----非双击"}))}),Wt("popup-action-message",async e=>{console.log("[cypress-recorder][background]接受来自popup的action消息: ",e);const t=e.data.action;switch(t){case Ce.Start:case Ce.Resume:await qs();break;case Ce.Pause:await Br();break;case Ce.Reset:await Ks();break;default:console.error(`[cypress-recorder][background]未捕获的操作：${t}`);break}})})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
